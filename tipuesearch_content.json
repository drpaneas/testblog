{"pages":[{"text":"με τον συντάκτη Ασχολούμαι με το blogging πολλά χρόνια πριν γίνει mainstream, γράφοντας σε μεγάλα διεθνή websites (Guru3D, VR -Zone) που έχουν να κάνουν με hardware, καθώς επίσης υπήρξα reviewer και σε κορυφαία ελληνικά forums, όπως το Insomnia και το Thelab (πρώην OutofSpecs). Στον χώρο του Linux πέρασα από το LinuxInside (τότε LinuxFormat), μετά από το OSArena, στην συνέχεια από το ξενόγλωσσο Unixmen και πλέον βρίσκομαι εδώ: στο Linuxed. Ζω στην Γερμανία, σε μία πανέμορφη πόλη που λέγεται Νυρεμβέργη και εργάζομαι στην SUSE Linux. Πιο συγκεκριμένα είμαι QA Engineer for Maintenance και αυτό που κάνω ουσιαστικά, είναι να διασφαλίζω την ποιότητα των πακέτων της SUSE για τους πελάτες της. Δεν έχω σπουδάσει πληροφορική, αλλά μηχανικός αυτοματισμού στο ΤΕΙ Θεσσαλονίκης. με το blog Ξεκίνησα αυτό το website ως μία πηγή πληροφοριών για όλους αυτούς που έχουν βαρεθεί να διαβάζουν διαρκώς τα ίδια και τα ίδια tutorials για αρχάριους. Τα άρθρα του Linuxed απευθύνονται σε προχωρημένο κοινό και χρήστες που διαθέτουν αρκετά καλή γνώση του τερματικού. Αυτό γίνεται γιατί δεν έχω τον χρόνο να γράψω αναλυτικά κάποια πράγματα που θεωρούνται ήδη γνωστά στους περισσότερους. Πολλά άρθρα που θα βρείτε έχουν γραφτεί με γνώμονα τις Enterprise διανομές ( SLE και Red Hat), οπότε μην νιώσετε άβολα αν χρησιμοποιείτε κάποια Debian-based distro. Δυστυχώς δεν θα με δείτε να σας γράφω την αντίστοιχη εντολή για κάθε διανομή — αυτό είναι δικό σας καθήκον και χαρά να ψάξετε.","tags":"Miscellaneous","loc":"http://drpaneas.github.io/testblog/skhetika","title":"Σχετικά"},{"text":"Σε αυτό το άρθρο θα μιλήσουμε για βασικές ρυθμήσεις που πρέπει να κάνουμε στον Nginx. Οι ρυθμήσεις αυτές έχουν περισσότερο την έννοια του optimization, παρά του configuration, καθώς ο Nginx έρχεται pretty much configured, οπότε εδώ θα μιλήσουμε τις βέλτιστες ρυθμήσεις . Για να κάνω μία εισαγωγή, θα μιλήσουμε για πράγματα όπως: πόση μνήμη έχουμε διαθέσιμη , πόσους πυρήνες (cpu) θα διαθέσουμε , και πώς αυτά θα επιδράσουν στον συνολικό αριθμό των processes , threads , κ.α. πραγμάτων που σχετίζονται με τους πόρους και την λειτουργία του Nginx στο σύστημά μας . Τονίζω το \" σύστημά μας \" γιατί ο σκοπός μου δεν είναι να σας δώσω έτοιμο το /etc/nginx/nginx.conf αλλά να σας δείξω ποιες ρυθμήσεις είναι common use και ποιες χρειάζονται λίγο tweaking από την πλευρά σας. Πάμε λοιπόν … vim /etc/nginx/nginx.conf Το αρχείο με το οποίο θα ασχοληθούμε, είναι το /etc/nginx/nginx.conf το οποίο αποτελεί το βασικό αρχείο ρυθμήσεων του Nginx. Είναι το Νο1 αρχείο στο οποίο κοιτάει ο Nginx να βρει πληροφορίες. Μόλις το ανοίξετε, θα δείτε ένα χάος από επιλογές και μεταβλητές οι οποίες άλλες είναι ήδη defined κι άλλες είναι απλά μαρκαρισμένες ως #comment . Μην σας πιάνει πανικός, πάμε να τις δούμε: Worker Processes Η μεταβλητή worker_processes μαζί με την worker_connections που θα δούμε στην συνέχεια, αποτελούν στην ουσία το backbone του Nginx. Ξεκινόντας με την πρώτη, αυτό που κάνει είναι να λέει στον server (ή τον virtual server) πόσους workers να διαθέσει για ένα connection. Μόλις ολοκληρωθεί το πάρε-δώσε τον μηνυμάτων και οριστικοποιηθούν έννοιες όπως dest IP , source IP , TCP Port , UDP Port , τότε ο Nginx κάνει spawn μία στρατιά από workers οι οποίοι είναι υπεύθυνοι για κατάσταση του εκάστωτε connection . παράδειγμα : Όταν συνδέεστε στο localhost:80 , ο Nginx θα ψάξει να δει τι τιμή έχει η μεταβλητή worker_processes και ανάλογα θα πράξει. Από default λοιπόν αυτή η λειτουργία αξιοποιείται στην TCP 80 για http protocol και στην TCP 443 για ssl (μην μπερδεύεστε, το https εννοώ). Για οποιοδήποτε άλλο socket 1 , θα πρέπει να το ρυθμήσουμε διαφορετικά ή να αγοράσουμε το εμπορικό μέρος του Nginx. Δεν είμα όμως σίγουρος, οπότε λέω να μην σας μπλέξω με αυτό. Άλλωστε δεν νομίζω να το χρειάζεστε, εκτός κι αν έχετε κάποιο αρκετά σύνθετο configuration, όπως για παράδειγμα πολλά ethX interfaces ή πολλά VM s σε bridge mode . H formula που χρησιμοποιείται ευρέως στο Internet λέει: 1 worker για κάθε core processor Προφανώς αυτό δεν είναι πανάκεια, δηλαδή μπορεί κάποιος να πει: \" Και γιατί ρε φίλε να μην βάλω 2 workers για κάθε core; Θα πάθει κάτι; Θα χαλάσει; \". Η απάντηση είναι, χμ, οκ δεν θα πάθει κάτι αλλά είναι bad practice , και ως side effect μπορεί να έχει κάποια connections να παραμένουν idle για αρκετό διάστημα, στα οποία όμως να σπαταλούνται workers, άρα επεξεργαστική ισχύ. Κακή διαχείριση πόρων λοιπόν — είναι κάτι που θέλουμε να αποφύγουμε, ειδικά στην περίπτωση μου που έχω έναν μικρό Atom Processor. Στην δική μου περίπτωση λοιπόν, γνωρίζω ότι έχω έναν Intel(R) Atom( TM ) CPU N2800 @ 1.86GHz , o οποίος σύμφωνα με τα specs είναι dual core με hyperthreading. Αυτό σημαίνει ότι έχω 4 threads. Άρα, σύμφωνα με την παραπάνω formula, θα δώσω 1 worker για κάθε thread, συνεπώς: worker_processes 4; Στην δική σας περίπτωση, αν δεν γνωρίζετε τι επεξεργαστή τρέχετε στον server, ή το VPS , μπορείτε απλά να ρίξετε μια ματιά στο /proc/cpuinfo/ . Για κάποιον ηλίθιο λόγο, έχουν μπερδέψει την έννοια του processor με του thread , οπότε αρκεί να μετρήσετε πόσα instances του processor σας εμφανίζει. Για να μάθετε να σκέφτεστε με εντολές bash, αυτό προϋποθέτει ένα cat του αρχείου, στην συνέχεια ένα grep του string processor μέσω ενός | , το οποίο στην περίπτωση μου, θα δώσε: ns348481:~ # cat /proc/cpuinfo | grep \"processor\" processor : 0 processor : 1 processor : 2 processor : 3 Οπότε, είτε μετράω με το μάτι, και βλέπω 4 processors (n+1) γιατί ξεκινάει από τον \"μηδέν\", ή απλά ξανά κάνω pipe και περνάω τα instances από έναν μετρητή ανα γραμμή , δηλαδή wc -l , δηλαδή κάπως έτσι: cat /proc/cpuinfo | grep \"processor\" | wc -l 4 Αν κάνω το λάθος, το παίξω άπλας , και δώσω μεγαλύτερο νούμερο, τότε για τον δικό μου server σημαίνει ότι δεσμεύω περισσότερους υπολογιστικούς πόρους από όσους πραγματικά έχω. Τι θα γίνει λοιπόν στην περίπτωση όπου υπάρχει όντως μεγάλο load και θα χρειαστούν αυτοί οι παραπάνω πόροι (τους οποίους δήλωσα εσφαλμένα ότι έχω;) ; Πρόβλημα! Για αυτό λοιπόν, σαν καλός μηχανικός θα δώσω τον σωστό αριθμό, και θα αφήσω τα μεγάλα λόγια για τους πολιτικούς. Computers don't lie. Worker Connections Η δεύτερη αλλά εξίσου σημαντική μεταβλητή, είναι η worker_connections η οποία βρίσκεται μέσα στο events {} structure. Το νούμερο που θα βάλουμε εδώ συμβολίζει το αριθμό των ταυτόχρονων connections. Με άλλα λόγια, είναι το πόσοι users μπορούν να συνδεθούν ταυτόχρονα, στον server. Αν και αυτό δεν είναι απολύτως σωστό, καθώς αν και συνήθως στην θεωρία ο browser ανοίγει ένα connection, στην πράξη αυτο φαίνεται να είναι 3 ή τουλάχιστον παραπάνω από 1. By default, ο Nginx έχει ορίσει την τιμή στα 768 connections, αλλά εμείς θα θέσουμε την βέλτιστη τιμή για το σύστημά σας, την οποία θα μας δώσει η εντολή ulimit . Αρκετές φορές χρησιμοποιώ αυτή την εντολή, ειδικά όταν τρέχω κάποιον bug reproducer όπου γνωρίζω εκ των πρωτέρων ότι θα έρθω αντιμέτωπος με κάποιο segmentation fault . Για να μπορέσω να κάνω debugging με το gdb , θα πρέπει να ορίσω τον αριρθμό τον maximum resources που μπορώ να δεσμεύσω στο σύστημα (και εδώ έρχεται η ulimit ). Σε διαφορετική, αν το σύστημα αρχίζει να τρέχει υπερβολικά πολλές processes ή να καταναλώνει υπερβολική μνήμη τότε είναι θέμα χρόνου μέχρι να γίνει το όλο πράγμα unresponsive . Για όσους δεν πιστεύουν ότι μπορεί να κρασάρει το Linux, be my guest και τρέξτε την ακόλουθη εντολή :(){ :|:& };: η οποία είναι κλασσικό fork bomb . Λέγοντας όλα αυτά, είναι εμφανές ότι ο Nginx θέλει να αποφύγει παρόμοια προβλήματα τα οποία θα οφείλονται σε μαζική κίνηση από έναν ή περισσότερους users. Βάζοντας μια μικρή τιμή, τότε περιορίζουμε την επισκεψημότητά μας, ενώ βάζοντας υψηλή τιμή υπερεκτιμάμε τις δυνατότητες του μηχανήματός μας. Η πιο σωστή επιλογή λοιπόν είναι να βάλουμε ακριβώς το sweet spot , το οποίο θα μας το δώσει η εκτέλεση της εντολής ulimit -n . Στην δική μου περίπτωση, το output της εντολής είναι 1024 , οπότε πάνω στο /etc/nginx/nginx.conf και την θέτω ως εξής: events { worker_connections 1024; use epoll; } Το epoll σημαίνει efficient method for connection processing και είναι ενεργοποιημένο από default στις καινούριες Linux διανομές. Αν έχετε kernel παλιότερο από Linux 2.6+ τότε ίσως πρέπει να χρησιμοποιήσετε το απλό poll ή την standard μέθοδο η οποία χρησιμοποιείτε σε περίπτώσει όπου υπάρχει αδυναμία χρήσης της efficient. Τώρα, αν έχετε FreeBSD, Solaris ή ο,τιδήποτε άλλο, περισσότερες πληροφορίες θα βρείτε εδώ . Buffers Αυτό που πρέπει να γνωρίζετε σχετικά με τους buffers, είναι πως αν τους θέσετε να έχουν πολύ μικρό μέγεθος, τότε ο Nginx θα αναγκαστεί να δημιουργεί τα δικά του προσωρινά αρχεία. Αυτό σημαίνει ότι θα αρχίσει ένα \"γράψε-διάβασε\", το οποίο ανάλογα με τα connections, μπορεί να οδηγήσει σε ανεπιθυμήτο load για το σύστημα. Όσο περισσότερο I/O κάνει ένα σύστημα, τόσο περισσότερο load προκαλεί, τόσο πιο πολύ καθυστερεί να απαντήσει σε requests . Υπάρχουν 4 buffers για τους οποίους θα μιλήσουμε: 1) Client Buffer Body Size Αυτό έχει να κάνει συνήθως με τις post actions . Όσοι γνωρίζετε HTML το μυαλό σας πολύ σωστά έχει πάει σε html forms ή buttons . 2) Client Header Buffer Size Ακριβώς το ίδιο, αλλά μόνο για τον header. Μία λογική τιμή που προτείνουν εδώ οι ειδικοί είναι 1024. 3) Client Max Body Buffer Είναι το μέγιστο επιτρεπόμενο μέγεθος για client request. Αν λοιπόν υπερβούμε αυτό το όριο, ο Nginx θα πετάξει ένα 413 Error - Request entity too larget . 4) Large Client Header Buffer Το οποίο είναι το ιδιο, αλλά για τον Header. Πάμε λοιπόν στο http { } section και εκεί θέτουμε: http { ... ... client_body_buffer_size 10k; client_header_buffer_size 1k; client_max_body_size 8m; large_client_header_buffers 2 1k; ... ... } Εδώ είναι ένα καλό σημείο να κάνουμε save και να τεστάρουμε αν το configuration έχει κάποιο λάθος (typo ή μη). Τρέχουμε λοιπόν την εολή nginx -t και περιμένουμε ένα output σας αυτό: nginx : the configuration file /etc/nginx/ nginx . conf syntax is ok nginx : configuration file /etc/nginx/ nginx . conf test is successful Timeouts Τα Timetous είναι ένα άλλο σημαντικό ζήτημα που αν δεν το λάβετε σοβαρά υπόψην σας, μπορεί να στραγγίξει όλη την δύναμη του πανίσχυρου server σας και να τον μετατρέψει από μία High Performance μηχανή σ'ένα αργό πεισματάρικο γαϊδουράκι. Εδώ έχουμε: Client Body Timeout Client Header Timeout Keepalive Timeout Send Timeout και τα θέτω ως εξής: client_body_timeout 12; client_header_timeout 12; keepalive_timeout 15; send_timeout 10; Τα παραπάνω, αποτελούν ένα τυπικό configuration για τον Nginx με μέτριο προς υψηλό traffic. Socket ονομάζουμε τον συνδυασμό IP και port . πχ 127.0.0.1:80 ↩","tags":"Nginx","loc":"http://drpaneas.github.io/testblog/paok","title":"paok"},{"text":"Σε αυτό το άρθρο θα μιλήσουμε για βασικές ρυθμήσεις που πρέπει να κάνουμε στον Nginx. Οι ρυθμήσεις αυτές έχουν περισσότερο την έννοια του optimization, παρά του configuration, καθώς ο Nginx έρχεται pretty much configured, οπότε εδώ θα μιλήσουμε τις βέλτιστες ρυθμήσεις . Για να κάνω μία εισαγωγή, θα μιλήσουμε για πράγματα όπως: πόση μνήμη έχουμε διαθέσιμη , πόσους πυρήνες (cpu) θα διαθέσουμε , και πώς αυτά θα επιδράσουν στον συνολικό αριθμό των processes , threads , κ.α. πραγμάτων που σχετίζονται με τους πόρους και την λειτουργία του Nginx στο σύστημά μας . Τονίζω το \" σύστημά μας \" γιατί ο σκοπός μου δεν είναι να σας δώσω έτοιμο το /etc/nginx/nginx.conf αλλά να σας δείξω ποιες ρυθμήσεις είναι common use και ποιες χρειάζονται λίγο tweaking από την πλευρά σας. Πάμε λοιπόν … vim /etc/nginx/nginx.conf Το αρχείο με το οποίο θα ασχοληθούμε, είναι το /etc/nginx/nginx.conf το οποίο αποτελεί το βασικό αρχείο ρυθμήσεων του Nginx. Είναι το Νο1 αρχείο στο οποίο κοιτάει ο Nginx να βρει πληροφορίες. Μόλις το ανοίξετε, θα δείτε ένα χάος από επιλογές και μεταβλητές οι οποίες άλλες είναι ήδη defined κι άλλες είναι απλά μαρκαρισμένες ως #comment . Μην σας πιάνει πανικός, πάμε να τις δούμε: Worker Processes Η μεταβλητή worker_processes μαζί με την worker_connections που θα δούμε στην συνέχεια, αποτελούν στην ουσία το backbone του Nginx. Ξεκινόντας με την πρώτη, αυτό που κάνει είναι να λέει στον server (ή τον virtual server) πόσους workers να διαθέσει για ένα connection. Μόλις ολοκληρωθεί το πάρε-δώσε τον μηνυμάτων και οριστικοποιηθούν έννοιες όπως dest IP , source IP , TCP Port , UDP Port , τότε ο Nginx κάνει spawn μία στρατιά από workers οι οποίοι είναι υπεύθυνοι για κατάσταση του εκάστωτε connection . παράδειγμα : Όταν συνδέεστε στο localhost:80 , ο Nginx θα ψάξει να δει τι τιμή έχει η μεταβλητή worker_processes και ανάλογα θα πράξει. Από default λοιπόν αυτή η λειτουργία αξιοποιείται στην TCP 80 για http protocol και στην TCP 443 για ssl (μην μπερδεύεστε, το https εννοώ). Για οποιοδήποτε άλλο socket 1 , θα πρέπει να το ρυθμήσουμε διαφορετικά ή να αγοράσουμε το εμπορικό μέρος του Nginx. Δεν είμα όμως σίγουρος, οπότε λέω να μην σας μπλέξω με αυτό. Άλλωστε δεν νομίζω να το χρειάζεστε, εκτός κι αν έχετε κάποιο αρκετά σύνθετο configuration, όπως για παράδειγμα πολλά ethX interfaces ή πολλά VM s σε bridge mode . H formula που χρησιμοποιείται ευρέως στο Internet λέει: 1 worker για κάθε core processor Προφανώς αυτό δεν είναι πανάκεια, δηλαδή μπορεί κάποιος να πει: \" Και γιατί ρε φίλε να μην βάλω 2 workers για κάθε core; Θα πάθει κάτι; Θα χαλάσει; \". Η απάντηση είναι, χμ, οκ δεν θα πάθει κάτι αλλά είναι bad practice , και ως side effect μπορεί να έχει κάποια connections να παραμένουν idle για αρκετό διάστημα, στα οποία όμως να σπαταλούνται workers, άρα επεξεργαστική ισχύ. Κακή διαχείριση πόρων λοιπόν — είναι κάτι που θέλουμε να αποφύγουμε, ειδικά στην περίπτωση μου που έχω έναν μικρό Atom Processor. Στην δική μου περίπτωση λοιπόν, γνωρίζω ότι έχω έναν Intel(R) Atom( TM ) CPU N2800 @ 1.86GHz , o οποίος σύμφωνα με τα specs είναι dual core με hyperthreading. Αυτό σημαίνει ότι έχω 4 threads. Άρα, σύμφωνα με την παραπάνω formula, θα δώσω 1 worker για κάθε thread, συνεπώς: worker_processes 4; Στην δική σας περίπτωση, αν δεν γνωρίζετε τι επεξεργαστή τρέχετε στον server, ή το VPS , μπορείτε απλά να ρίξετε μια ματιά στο /proc/cpuinfo/ . Για κάποιον ηλίθιο λόγο, έχουν μπερδέψει την έννοια του processor με του thread , οπότε αρκεί να μετρήσετε πόσα instances του processor σας εμφανίζει. Για να μάθετε να σκέφτεστε με εντολές bash, αυτό προϋποθέτει ένα cat του αρχείου, στην συνέχεια ένα grep του string processor μέσω ενός | , το οποίο στην περίπτωση μου, θα δώσε: ns348481:~ # cat /proc/cpuinfo | grep \"processor\" processor : 0 processor : 1 processor : 2 processor : 3 Οπότε, είτε μετράω με το μάτι, και βλέπω 4 processors (n+1) γιατί ξεκινάει από τον \"μηδέν\", ή απλά ξανά κάνω pipe και περνάω τα instances από έναν μετρητή ανα γραμμή , δηλαδή wc -l , δηλαδή κάπως έτσι: cat /proc/cpuinfo | grep \"processor\" | wc -l 4 Αν κάνω το λάθος, το παίξω άπλας , και δώσω μεγαλύτερο νούμερο, τότε για τον δικό μου server σημαίνει ότι δεσμεύω περισσότερους υπολογιστικούς πόρους από όσους πραγματικά έχω. Τι θα γίνει λοιπόν στην περίπτωση όπου υπάρχει όντως μεγάλο load και θα χρειαστούν αυτοί οι παραπάνω πόροι (τους οποίους δήλωσα εσφαλμένα ότι έχω;) ; Πρόβλημα! Για αυτό λοιπόν, σαν καλός μηχανικός θα δώσω τον σωστό αριθμό, και θα αφήσω τα μεγάλα λόγια για τους πολιτικούς. Computers don't lie. Worker Connections Η δεύτερη αλλά εξίσου σημαντική μεταβλητή, είναι η worker_connections η οποία βρίσκεται μέσα στο events {} structure. Το νούμερο που θα βάλουμε εδώ συμβολίζει το αριθμό των ταυτόχρονων connections. Με άλλα λόγια, είναι το πόσοι users μπορούν να συνδεθούν ταυτόχρονα, στον server. Αν και αυτό δεν είναι απολύτως σωστό, καθώς αν και συνήθως στην θεωρία ο browser ανοίγει ένα connection, στην πράξη αυτο φαίνεται να είναι 3 ή τουλάχιστον παραπάνω από 1. By default, ο Nginx έχει ορίσει την τιμή στα 768 connections, αλλά εμείς θα θέσουμε την βέλτιστη τιμή για το σύστημά σας, την οποία θα μας δώσει η εντολή ulimit . Αρκετές φορές χρησιμοποιώ αυτή την εντολή, ειδικά όταν τρέχω κάποιον bug reproducer όπου γνωρίζω εκ των πρωτέρων ότι θα έρθω αντιμέτωπος με κάποιο segmentation fault . Για να μπορέσω να κάνω debugging με το gdb , θα πρέπει να ορίσω τον αριρθμό τον maximum resources που μπορώ να δεσμεύσω στο σύστημα (και εδώ έρχεται η ulimit ). Σε διαφορετική, αν το σύστημα αρχίζει να τρέχει υπερβολικά πολλές processes ή να καταναλώνει υπερβολική μνήμη τότε είναι θέμα χρόνου μέχρι να γίνει το όλο πράγμα unresponsive . Για όσους δεν πιστεύουν ότι μπορεί να κρασάρει το Linux, be my guest και τρέξτε την ακόλουθη εντολή :(){ :|:& };: η οποία είναι κλασσικό fork bomb . Λέγοντας όλα αυτά, είναι εμφανές ότι ο Nginx θέλει να αποφύγει παρόμοια προβλήματα τα οποία θα οφείλονται σε μαζική κίνηση από έναν ή περισσότερους users. Βάζοντας μια μικρή τιμή, τότε περιορίζουμε την επισκεψημότητά μας, ενώ βάζοντας υψηλή τιμή υπερεκτιμάμε τις δυνατότητες του μηχανήματός μας. Η πιο σωστή επιλογή λοιπόν είναι να βάλουμε ακριβώς το sweet spot , το οποίο θα μας το δώσει η εκτέλεση της εντολής ulimit -n . Στην δική μου περίπτωση, το output της εντολής είναι 1024 , οπότε πάνω στο /etc/nginx/nginx.conf και την θέτω ως εξής: events { worker_connections 1024; use epoll; } Το epoll σημαίνει efficient method for connection processing και είναι ενεργοποιημένο από default στις καινούριες Linux διανομές. Αν έχετε kernel παλιότερο από Linux 2.6+ τότε ίσως πρέπει να χρησιμοποιήσετε το απλό poll ή την standard μέθοδο η οποία χρησιμοποιείτε σε περίπτώσει όπου υπάρχει αδυναμία χρήσης της efficient. Τώρα, αν έχετε FreeBSD, Solaris ή ο,τιδήποτε άλλο, περισσότερες πληροφορίες θα βρείτε εδώ . Buffers Αυτό που πρέπει να γνωρίζετε σχετικά με τους buffers, είναι πως αν τους θέσετε να έχουν πολύ μικρό μέγεθος, τότε ο Nginx θα αναγκαστεί να δημιουργεί τα δικά του προσωρινά αρχεία. Αυτό σημαίνει ότι θα αρχίσει ένα \"γράψε-διάβασε\", το οποίο ανάλογα με τα connections, μπορεί να οδηγήσει σε ανεπιθυμήτο load για το σύστημα. Όσο περισσότερο I/O κάνει ένα σύστημα, τόσο περισσότερο load προκαλεί, τόσο πιο πολύ καθυστερεί να απαντήσει σε requests . Υπάρχουν 4 buffers για τους οποίους θα μιλήσουμε: 1) Client Buffer Body Size Αυτό έχει να κάνει συνήθως με τις post actions . Όσοι γνωρίζετε HTML το μυαλό σας πολύ σωστά έχει πάει σε html forms ή buttons . 2) Client Header Buffer Size Ακριβώς το ίδιο, αλλά μόνο για τον header. Μία λογική τιμή που προτείνουν εδώ οι ειδικοί είναι 1024. 3) Client Max Body Buffer Είναι το μέγιστο επιτρεπόμενο μέγεθος για client request. Αν λοιπόν υπερβούμε αυτό το όριο, ο Nginx θα πετάξει ένα 413 Error - Request entity too larget . 4) Large Client Header Buffer Το οποίο είναι το ιδιο, αλλά για τον Header. Πάμε λοιπόν στο http { } section και εκεί θέτουμε: http { ... ... client_body_buffer_size 10k; client_header_buffer_size 1k; client_max_body_size 8m; large_client_header_buffers 2 1k; ... ... } Εδώ είναι ένα καλό σημείο να κάνουμε save και να τεστάρουμε αν το configuration έχει κάποιο λάθος (typo ή μη). Τρέχουμε λοιπόν την εολή nginx -t και περιμένουμε ένα output σας αυτό: nginx : the configuration file /etc/nginx/ nginx . conf syntax is ok nginx : configuration file /etc/nginx/ nginx . conf test is successful Timeouts Τα Timetous είναι ένα άλλο σημαντικό ζήτημα που αν δεν το λάβετε σοβαρά υπόψην σας, μπορεί να στραγγίξει όλη την δύναμη του πανίσχυρου server σας και να τον μετατρέψει από μία High Performance μηχανή σ'ένα αργό πεισματάρικο γαϊδουράκι. Εδώ έχουμε: Client Body Timeout Client Header Timeout Keepalive Timeout Send Timeout και τα θέτω ως εξής: client_body_timeout 12; client_header_timeout 12; keepalive_timeout 15; send_timeout 10; Τα παραπάνω, αποτελούν ένα τυπικό configuration για τον Nginx με μέτριο προς υψηλό traffic. Socket ονομάζουμε τον συνδυασμό IP και port . πχ 127.0.0.1:80 ↩","tags":"Nginx","loc":"http://drpaneas.github.io/testblog/vasiko-configuration-tou-nginx","title":"Βασικό configuration του Nginx"},{"text":"Μετά την εισαγωγή στο προηγούμενο άρθρο, ήρθε η στιγμή να ξεκινήσουμε τις νέες μας περιπέτειες με τον Nginx. Για να γίνει όμως αυτό, όπως συμβαίνει γενικά με κάθε πρόγραμμα, πρέπει πρώτα από όλα, να εγκατασήσουμε και να ρυθμήσουμε τον Nginx στο σύστημά μας. Truth be told , σε αυτό τό άρθρο θα αναφερθώ περισσότερο στο πώς να τον κάνετε εγκατάσταση, παρά στο πώς να τον ρυθμίσετε. Για όσους βαριούνται να διαβάζουν, έχω ετοιμάσει ένα μικρό βιντεάκι Εγκατάσταση nginx Στην συνέχεια του άρθρου θα βρείτε πληροφορίες για κάθε βασική διανομή. Centos 7 / Red Hat 7 Για όσους χρησιμοποιούν CentOS, θα χρειαστούν το αντίστοιχο repository της epel . Με ένα γρήγορο google search θα μάθετε (όσοι δεν γνωρίζετε ήδη), ότι το epel (ή μάλλον EPEL με κεφαλαία), σημαίνει: E xtra P ackages for E nterprise L inux και μπορείτε να μάθετε τα πάντα για αυτό το project στο σχετικό wiki του fedora project . Για όσους χρησιμοποιούν λοιπόν, είτε Centos 7 είτε RHEL 7, το repo προστείθετε στο σύστημά σας, υπό την μορφή ενός RPM . Το κατεβάζετε, το εγκαθιστάτε και voila . wget http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-5.noarch.rpm Μην με ρωτήσει κανείς πού είναι το link για 32-bit arch , γιατί πολύ απλά το Centos 7, δεν βγαίνει για 32-bit processors. Τόσο απλά :) Επίσης, αν δεν έχετε το wget, εγκαταστήστε το yum install wget . Αν δεν είστε σίγουροι σχετικά με το ποια ακριβώς έκδοση CentOS ή RHEL έχετε εγκατεστημένη, τότε μπορείτε να το μάθετε με την εντολή: cat /etc/os-release Αφού έχουμε κάνει fetch το rpm, δεν μένει παρά να το εγκαταστήσουμε: rpm -Uvh epel-release-7-5.noarch.rpm Πάμε να κάνουμε ένα verify ότι epel repo προστέθηκε με επιτυχία: yum repolist | grep epel Ας κάνουμε τώρα ένα pull της cache database της repolist ώστε να ανανεωθούν τα αρχεία. Συγκεκριμένα με ενδιαφέρει το /etc/yum.repos.d/epel.repo αλλά τα ανανεώνω όλα γιατί είναι πιο εύκολο και δεν διαρκεί πολύ. Μετά από αυτό, το λογικό είναι να έχουμε πλέον το nginx έτοιμο προς εγκατάστηση στα repos. yum update yum install nginx Κατά την εγκατάσταση θα δείτε ότι έχει αρκετές dependecies, αρκετές από αυτές είναι ίδιες με αυτές του Apache. Ωστόσο, έχετε και κάποιες μοναδικές για αυτόν, όπως η λειτουργία GeoIP και το ίδιο το nginx-filesystem. Debian 7, Ubuntu 14 LTS Εδώ τα πράγματα είναι πολύ απλά. Δεν χρειάζεται κανένα επιπλέον repo. sudo apt-get install nginx OpenSUSE Κι εδώ τα πράγματα εξακολουθούν να είναι πανεύκολα: zypper in nginx Ενεργοποιήση του service Αφού ολοκληρωθεί η εγκατάσταση, αυτό που έχουμε να κάνουμε είναι να βάλουμε τον daemon να ξεκινάει κατά το startup . Το οποίο για όσους γνωρίζουν το systemd αυτό σημαίνει ότι θα χρειαστούν την εντολή systemctl enable nginx.service , ενώ οι παλιοί μπορούν να χρησιμοποιήσουν chkconfig nginx on . Έτσι λοιπόν, σε οποιοδήποτε runlevel κι αν bootάρει το σύστημά σας (εκτός από το recovery προφανώς), θα εκκινήσει μαζί του και ο nginx. Έχοντας πλέον ρυθμίσει την εκκίνηση κατά το boot, ήρθε η στιγμή να τον βάλουμε μπρος και να ελέξουμε ότι όλα πήγαν καλά. Για να ξεκινήσουμε τον nginx δίνουμε, είτε systemctl start nginx.service για όσους έχουν systemd , είτε service start nginx για τους υπόλοιπους. Έλεγχος του webserver Ξανά, έχω ετοιμάσει ένα 2o βιντεάκι για όσους προτιμάνε το Youtube από την ανάγνωση (και καλά κάνουν). Για ελέξουμε ότι ο webserver λειτουργεί κανονικά, θα εγκαταστήσουμε έναν μικρό ελαφρύ και console-based browser (ή μάλλον ncurses-based), με τον οποίον θα ανοίξουμε το index.html στο localhost . Για αυτόν τον σκοπό θα χρησιμοποιήσουμε τον lynx . yum install lynx Αφού τον εγκαταστήσουμε, δοκιμάζουμε να επισκεφτούμε, το localhost, περιμένοντας να δούμε την default localhost webpage του nginx: lynx http://localhost . Ελπίζω όλα να πήγαν καλά! Στα παρακάτω άρθρα θα αναφερθούμε σε ρυθμήσεις γύρω από τον nginx. Για να πάρετε μία ιδέα, το directory που θα δουλεύουμε είναι το /etc/nginx . Εκεί η δομή δεν διαφέρει από αυτά που θα έχετε πιθανώς δει στον apache .Παρόλα αυτά, το πιο σημαντικό αρχείο που έχει να κάνει με την ρύθμιση του server αυτού, καθ'αυτού, με την έννοια του daemon/service, είναι το /etc/nginx/nginx.conf . Σε αυτό το αρχείο θέτουμε πού θα μπουν τα logs (από default πηγαίνουν στο /var/log/nginx.log ), πού θα βρίσκεται το PID αρχείο, πόσους πυρήνες και threads θα δεσμεύσουμε κλπ. Τα αρχεία, προς το παρών, φαίνεται ότι τοποθετούνται στο /srv/www/htdocs/ directory. Οπότε, λέγοντας αυτά, πιστεύω ότι πήρατε μία γεύση σχετικά με το τι θα ασχοληθούμε στα υπόλοιπα άρθρα :)","tags":"Nginx","loc":"http://drpaneas.github.io/testblog/egkatastasi-tou-nginx","title":"Εγκατάσταση του Nginx"},{"text":"Σε αυτό το άρθρο θα μιλήσουμε για τον Nginx 1 HTTP Webserver (ω ναι, υπάρχουν κι άλλοι webservers πέρα από τον Apache ). Όταν λέω ότι θα κάνουμε μία εισαγωγή, εννοώ ότι θα ξεκινήσουμε την εξερεύνηση απαντώντας σε κάποια από τα βασικά ερωτήματα, όπως: Σε τι διαφέρει από τον Apache; Ποια είναι να χαρακτηριστικά του; Γιατί να ασχοληθούμε μαζί του; Καταρχάς, ο Nginx δεν είναι καινούριος. Υπάρχει εδώ και αρκετό καιρό στην πιάτσα , συγκεκριμένα το dev ξεκίνησε το 2002 και το 2004 κυκλοφόρισε η πρώτη του έκδοση. Ωστόσο το τελευταίο διάστημα βλέπω ότι έχει αρχίζει να τραβάει πάνω του αρκετή προσοχή. Μάλιστα, δεν είναι λίγοι εκείνοι που έκαναν την μετάβαση από τον \"Βασιλιά Των Webservers\" ( βλ. Apache) στον Nginx. Παρόλα αυτά, ο Apache εξακολουθεί να κρατάει σταθερά τα ηνία του HTTP , αφού κατέχει περίπου το 50-75% των webservers του Internet. Το ερώτημα, λοιπόν, είναι: Γιατί να ασχοληθεί κανείς με τον Nginx Σαν κλασσικός σπασίκλας, θα σας κάνω quote από την Wikipedia: Nginx is an open source reverse proxy server for HTTP , HTTPS , SMTP , POP3 , and IMAP protocols, as well as a load balancer, HTTP cache, and a web server. Ωραία και; Γιατί να μην βάλω Apache; Η πιο λογική ερώτηση είναι γιατί να μην ασχοληθεί κανείς με τον Apache; Μία σκέψη που θα μπορούσε να πει κάποιος είναι: \"Εδώ το μισό Internet σερβίρει… σε εμένα θα \"κολλήσει\"; \" Καταρχάς μην πάσχετε από Argumentum ad populum 2 . Κατά δεύτερον, η διαφορά του Nginx με τον Apache, είναι ότι ο Nginx κάνει τα ίδια πράγματα, αλλά με τα \"διαφορετικό τρόπο\" . Τώρα θα μου πείτε, τι εννοείς λέγοντας \" διαφορετικό \"; Είναι \" καλύτερος \"; Είναι \" χειρότερος \"; Well, in this context I mean … διαφορετικός τρόπος = πολλές φορές καλύτερος από τον Apache Για να το πω πιο τεχνικά, ο Nginx διαφέρει από τον Apache στον τρόπο που χειρίζεται τα requests . Ας αρχίζουμε όμως με τον Apache, ο οποίος μεταχειρίζεται (by default) τα requests όπως και η κάρτα γραφικών, δηλαδή: παράλληλα και σε threads . Το μοντέλο αυτό θα το ακούσετε και αλλιώς ως process-oriented . Με απλά λόγια, σημαίνει ότι: για 1 connection κάνει generate τουλάχιστον 1 thread, και φυσικά ο σκοπός είναι να τα επεξεργάζεται (όλα αυτά τα) threads παραλληλα. Πολύ έξυπνο! Πάντα ήμουν fan του parallel thread processing, αλλά πριν βιαστείτε δώσετε ±1, πρέπει πρώτα να σκεφτείτε ποια είναι τα πλεονεκτήματα και τα μειονεκτήματα αυτού του μοντέλου. Ένα από τα μειονεκτήματα είναι το γεγονός ότι αν έχουμε μπόλικο static content, δηλ. πολλά αρχεία, τότε αρχίζει και καταλαμβάνει περισσότερη μνήμη από το κανονικό, και αυτό το φαινόμενο συνεχίζει να επιδεινώνεται μέχρι να τερματίσει το εκάστωτε session. Από την άλλη μεριά, ο Nginx δεν λειτουργεί με αυτόν τον τρόπο. Χρησιμοποιεί έναν asynchronous event-handler και με αυτόν διαχειρίζεται τα requests. Αυτό σημαίνει ότι, ακόμα κι αν μεταχειρίζεται τις εισερχόμενες connections ως ανεξάρτητες μεταξύ τους, τις επιτρέπει να μοιράζονται , να κάνουν share, το memory space. Αυτό το γεγονός επιτρέπει στον Nginx να αποδίδει πολύ καλά κάτω υπό συνθήκες μεγάλου φόρτου. Και στην πραγματικότητα, αυτός είναι ο πιο σημαντικός λόγος για τον οποίον αρκετοί προτιμούν τον Nginx έναντι του Apache. Με τον Apache webserver, μπορείτε να σερβίρετε ταυτόχρονα/παράλληλα μερικές εκατοντάδες connections, οι οποίες όμως εξαρτώνται \"αρκετά\" από τα hardware resources, και συγκεκριμένο τον χώρο και την μνήμη που διαθέτει το μηχάνημα. Ειδικά τώρα που τα περισσότερα websites φορτώνουν διάφορα CMS , όπως Wordpress ή Drupal, το καθένα από αυτά είναι αρκετά βαρύ και μπορεί να γίνει ακόμα πιο βαρύ προσθέτοντας διάφορα plugin. Συνεπώς, μην σας παραξενεύει ότι το VPS των 5 Ευρώ που νοικιάζετε, με 128mb RAM , Apache και Wordpress, αρχίζει να σέρνεται σε ώρες αιχμής . Σε αντίθεση, ο Nginx μπορεί να ανταπεξέλθει εξυπηρετώντας (όχι εκατοντάδες, αλλά) χιλιάδες connections με μικρότερη ή τουλάχιστον ίδια μνήμη, χωρίς να έχει πρόβλημα με τις sessions. Nginx Features Ο Nginx έχει ένα κάρο χαρακτηριστικά, αλλά θα σταθούμε στα πιο σημαντικά, ενώ θα τα συγκρίνουμε και με τα αντίστοιχα του Apache. Διαχειρίζεται static files, index files, και κάνει auto indexing : Το ίδιο και ο Apache, πάμε παρακάτω… Reverse proxy with caching : Το ίδιο μπορεί να γίνει και στον Apache, αλλά απαιτεί επιπλέον modules Load balancing : Το ίδιο κάνει και ο Apache, αλλά θέλει plugin, ενώ ο Nginx το κάνει έχει built-in ;) Support fault tolerance : Σας επιτρέπει να κάνετε configure πολλούς nodes που θα μοιρίζονται το ίδιο session state στην μνήμη μεταξύ τους. Δεν υπάρχει κάτι αντίστοιχο για τον Apache. OpenSSL Support (including SNI και OCSP stapling) : Αυτό είναι σημαντικό γιατί όπως είδατε πρόσφατα 3 , το SSL είναι πλέον το πιο trendy στόχαστρο των hackers. Οπότε, υποστηρίζοντας τα latest and greatest της κρυπτογραφίας, ίσως είναι καλύτερο. FastCGI, PHP - FPM και SCGI Support : Στην ουσία είναι modules που προσδίδουν την δυνατότητα εκτέλεσης scripts ( πχ php), τα οποία μπορεί να κάνουν ο,τιδήποτε μας έρθει στο κεφάλι, αλλά αυτά που συναντάμε συνήθως έχουν να κάνουν με τα κλασσικά πράγματα που απασχολούν τον web development , όπως πχ το authetication . Fully IPv6 : Υποστηρίζει πλήρως το IPv6. Το ίδιο και ο Apache αλλά με module, μετά την έκδοση 2.2 Websockets και HTTP /1.1 : Αναμενόμενο και για τους δύο, αφού είναι webserver. Live stream file compression : Ιδανικό για video streaming. Ο Apache δεν διαθέτει κάτι ανάλογο. URL Redirects και rewriting : Ψωμοτύρι για τους webservers, πάμε παρακάτω… Bandwidth Throttling : Υποστηρίζεται και στον Apache μέσω modules, ενώ στον nginx είναι απλά μία ρύθμιση το base configuration file. Geolocation of IP : Από τις πιο sexy τεχνολογίες του Nginx, όπου σου παρέχει έναν τρόπο να κάνεις διαχείριση των IP σε σχέση με την τοποθεσία τους. Χρησιμοποιείται κυρίως για CDNs 4 που σερβίρουν static content. ΠΟΛΥ Λίγη μνήμη : Όπως είπαμε και πριν, μπορεί να διαχειριστεί 10.000 ταυτόχρονες συνδέσεις με μόλις 2.5mb μνήμης χωρίς πρόβλημα στο keep-alive πάρα-δώσε που έχουν οι sessions για να παραμένουν ανοιχτές. Είναι η νέα γενιά των webservers Όπως ξέρουμε τα πράγματα σήμερα, ο Apache είναι ο Βασιλιάς των Webserbers, σερβίροντας το Internet στα πιάτα των περισσότερων ανθρώπων. Ωστόσο, όσο το Internet of Things αρχίζει να μπαίνει όλο και περισσότερο στην ζωή μας, η ανάγκη για better perfomance γίνεται όλο και πιο επιτακτική. Σκεφτείτε πόσες συσκευές χρησιμοποιούμε στην καθημεριμενότητά μας, και πόσες από αυτές χρησιμοποιούν δίκτυο: TV , Smart-Watch, Smartphones, Keyboards, Tablets κλπ είναι λογικό λοιπόν, αφού αυξάνονται οι clients να αυξάνονται και τα connections προς τους servers. Σκεπτόμενοι ότι ο average Joe θέλει να έχει άμεση πρόσβαση στο περιεχόμενό του, είναι ανυπόμονος και θέλει να του σερβίρουν (server) το φαγητό (web) \" τώρα \", τότε τουλάχιστον 2 πράγματα είναι ξεκάθαρα ότι θα χρειαστούμε: Μείωση του Response Time Περισσότερες παράλληλες συνδέσεις Για την ώρα λοιπόν, όσο η ανάγκη για το Internet of Things μεγαλώνει, τόσο μεγαλύτερη διαφήμιση θα αποκτά ο Nginx. Προφέρεται \"engine\" \"X\" ↩ Σύνδρομο της Αγγέλης ( περισσότερα ) ↩ Αναφέρομαι στο Heartbleed bug ↩ CDN είναι μία ομάδα από webnodes, που σου σερβίρουν περιεχόμενο με βάση το που βρίσκεσαι (την γεωγραφική σου τοποθεσία). Δηλαδή επιλέγουν να σου στείλουν το content από τον server που βρίσκεται πιο κοντά σου. ↩","tags":"Nginx","loc":"http://drpaneas.github.io/testblog/eisagogi-ston-nginx","title":"Εισαγωγή στον Nginx"},{"text":"Καταρχήν να ξεκινήσω λέγοντας ότι δεν έχω σκοπό να κάνω διαφήμιση την IPHost . Ο λόγος που την χρησιμοποιώ, είναι γιατί ήμουν αρκετά τυχερός ώστε να κερδίσω ένα domain με κατάληξη .eu σ'έναν διαγωνισμό του Insomnia . Ε, αφού το κέρδισα, λογικό (και επόμενο είναι) να το χρησιμοποιήσω. Η αλήθεια είναι ότι σπάνια παίρνω μέρος σε διαγωνισμούς. Συνήθως τα Χριστούγεννα θα δείτε ότι γίνεται πανικός σε διάφορα γνωστά forums , όπως είναι το Thelab.gr , το Insomnia.gr , HWBox , deltahacker κ.α. τότε πραγματικά αξίζει να πάρεις μέρος γιατί έχουν μερικά πολύ όμορφα δώρα. Θυμάμαι χαρακτηριστικά, έναν πολύ διασκεδαστικό διαγωνισμό που είχα πάρει μέρος: ήταν στο παλιό - καλό OutofSpecs , όπου ο νικητής θα ήταν αυτός που θα κατάφερνε να πετύχει το χαμηλότερο score στο 3DMark 2001 SE . Οι καλύτερες εποχές! Τέλος πάντων, ας μην μακρυγορώ και ας μπω στο θέμα: Όπως θα ξέρετε ήδη 1 , έχω αγοράσει έναν dedicated server αξίας 5 Ευρώ . Ω ναι, μιλάμε για real hardware και όχι για κάποιο VPS με shared resources . Βλέπετε, μετά από αυτό που τράβηξα με την Dreamhost και το UbuntuXtreme.com , όπου κάθε \"τρεις-και-λίγο\" το VPS έκανε reboot και με χρεώνε λόγω έλειψης πόρων κάνοντας ταυτόχρονα και το website μή προσπελάσιμο από τους επισκέπτες, υποσχέθηκα στον εαυτό μου ότι δεν θα δοκιμάσω ποτέ ξανά VPS . Ποτέ ξανά VPS . Τα VPS είναι @& &#94;$&&#94;@# &#94; !!! DNS Προφανώς και όταν θέλουμε ένα domain να κάνει resolve σε μία IP , την δουλειά την αναλαμβάνει ο DNS . Στην συγκεκριμένη περίπτωση, θα πρέπει να πάμε στην εταιρία που έχουμε κάνει register το Domain μας, και εκεί, κάπου, στον πίνακα ελέγχου, θα πρέπει να μας παρέχει την δυνατότητα να τροποιποιήσουμε τα DNS Records/Zone . Πήγα λοιπόν στο control panel της IPHost, έκανα login, πήγα στα \"Domains μου\" και ιδού: Στην συνέχεια πατάμε Δημιουργία/Διαχείριση Ζώνης DNS … στην συνέχεια βάζω την IPv4 του Dedicated Server μου, η οποία είναι 37.187.4.87 , και περιμένω να ρυθμιστούν όλα μόνα τους (seriously, πολύ εύκολο :P ) Επαλήθευση, ότι λειτουργεί Επειδή παίρνει κάποια ώρα το όλο update των nameservers , μην περιμένετε να δείτε άμεση ανταπόκριση από τον browser. Στην δική μου περίπτωση δεν περιμένω έτσι κι αλλιώς, αφού δεν τρέχω κάποιον webserver την TCP 80. Σε πρώτη φάση λοιπόν, ας ανοίξουμε το τερματικό και ας παίξουμε με τα τόσα παιχνίδια που υπάρχουν στο Linux. nslookup pingouinos.eu Server: 192.168.178.1 Address: 192.168.178.1#53 ** server can ' t find pingouinos.eu: NXDOMAIN Όπως φαίνεται ακόμα δεν έχουν ανανεωθεί οι DNS . Ιδέα : Να χρησιμοποιήσω τους DNS της Google 2 , οι οποίοι προφανώς είναι πολύ καλύτεροι από αυτούς που χρησιμοποιεί ο γερμανικός ISP μου. Για όσους δεν γνωρίζουν, οι DNS της Google είναι 8.8.8.8 και 8.8.4.4 . Οπότε δίνουμε ξανά την ίδια εντολή, μόνο που αυτή την φορά το request θα γίνει από την Google: nslookup pingouinos.eu 8.8.8.8 Server: 8.8.8.8 Address: 8.8.8.8#53 Non-authoritative answer: Name: pingouinos.eu Address: 37.187.4.87 Ώπα! Η Google είναι ενημερωμένη, βλέπει τις αλλαγές! Αυτό σημαίνει ότι όλα τα κάναμε σωστά και λίγες ώρες, θα ενημερωθεί και ο δικός μας πάροχος και όλα ok . Μπορείτε επίσης να διευρήνεσετε ακόμα περισσότερο τα πράγματα χρησιμοποιώντας την εντολή dig , η οποία ρωτάει για πληροφορίες όπως A , NS , MX . Για παράδειγμα: dig pingouinos.eu NS 8.8.8.8 ; <<>> DiG 9.8.3-P1 <<>> pingouinos.eu NS 8.8.8.8 ;; global options: +cmd ;; Got answer: ;; ->>HEADER <<- opcode: QUERY, status: NOERROR, id: 46292 ;; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 1, ADDITIONAL: 0 ;; QUESTION SECTION: ;pingouinos.eu. IN NS ;; AUTHORITY SECTION: eu. 516 IN SOA ns04.iphost.gr. admin.iphost.gr. 2009022301 14400 7200 604800 14400 ;; Query time: 2 msec ;; SERVER: 192.168.178.1#53(192.168.178.1) ;; WHEN: Wed Jan 21 21:01:41 2015 ;; MSG SIZE rcvd: 87 ;; Got answer: ;; ->>HEADER<<- opcode : QUERY, status: NXDOMAIN, id: 19434 ;; flags: qr rd ra ; QUERY: 1, ANSWER: 0, AUTHORITY: 1, ADDITIONAL: 0 ;; QUESTION SECTION: ; 8.8.8.8. IN A ;; AUTHORITY SECTION: . 783 IN SOA a.root-servers.net. nstld.verisign-grs.com. 2015012101 1800 900 604800 86400 ;; Query time : 1 msec ;; SERVER: 192.168.178.1#53 ( 192.168.178.1 ) ;; WHEN: Wed Jan 21 21:01:41 2015 ;; MSG SIZE rcvd: 100 Κάπου εδώ θα σταματήσω, και θα επανέλθω αύριο να ανανεώσω το άρθρο, ώστε να είμαστε 100% σίγουροι ότι λειτούργησε η \"σύνδεση\" και δεν σας γράφω σαχλαμάρες. 24 ώρες μετά … Έχει περάσει σχεδόν μία μέρα, και ήρθε η στιγμή να επαληθεύσουμε αν το pingouinos.eu κάνει resolve στην IP του server μου: drpaneas@macbook:~/Desktop $ nslookup pingouinos.eu Server: 192.168.178.1 Address: 192.168.178.1#53 Non-authoritative answer: Name: pingouinos.eu Address: 37.187.4.87 Τέλεια! Οπότε τωρα δεν χρειάζεται να θυμάμαι την IP :D Διαβάστε το άρθρο New dedicated server in da house με 5 Eυρώ ↩ Περισσότερες πληροφορίες για τους Public Google DNS θα βρείτε εδώ ↩","tags":"how-to","loc":"http://drpaneas.github.io/testblog/pos-sindeo-ena-domain-apo-tin-IPHost-me-tin-ip-tou-server-mou","title":"Πώς συνδέω ένα domain (IPHost) με τον server μου"},{"text":"Η ώρα είναι 4:09, ξημερώματα και βρίσκομαι στην Γερμανία. Η Αλεξάνδρα κοιμάται δίπλα στο δωμάτιο και εγώ βρίσκομαι στο σαλόνι γράφοντας αυτό το άρθρο στον vim . Από κάτω ακούγονται διάφοροι μεθυσμένοι Γερμανοί, καθώς υπάρχει ένα μπαρ που ανοίγει σχετικά αργά. Βλέπετε, αύριο ( δηλαδή σήμερα ) είναι Σάββατο, οπότε του δίνουν και καταλαβαίνει . Τέλος πάντων, το ερώτημα είναι γιατί … Γιατί δεν κοιμάμαι; Πρόβλημα στο Fritzbox Η σύνδεση που έχω στο Internet είναι VDSL 50, με πάροχο την 1-und-1 , η οποία είναι θυγατρική της Deutsche Telekom. Το Router που μου έδωσαν είναι ένα Fritz!Box 7362 SL , το οποίο κανονικά στοιχίζει περίπου 125 Ευρώ στο Amazon. Γενικά είμαι πολύ ευχαριστημένος από το Internet εδώ. Το μόνο μου πρόβλημα είναι ότι το Macbook δεν δουλεύει καλά με τον driver όταν το WLAN έχει WPA2 (only) security, αλλά … τι να κάνεις! Αυτά έχει η Apple . Στις 00:05 (περίπου) χτυπάει το κινητό μου. Ήταν η θεία μου που μένει στο Sindelfingen: Πάνο, τι έπαθε το τηλέφωνό σας; Σας παίρνω τηλέφωνο αλλά δεν χτυπάει. Όντως, σηκώνω το ακουστικό και δεν ακούω τίποτα. Πηγαίνω μέσα στο Fritz!box και βλέπω να αναβοσβήνει το κόκκινο LED (info). Βλέπετε, το τηλέφωνο εδώ είναι VOIP , και έχω 3 Rufnummem , τα οποία μπορώ να κάνω forward στο κινητό μου. Δηλαδή αν με παίρνεις στο σταθερό, μπορώ να το τροποιήσω ώστε να χτυπάει και το κινητό (εφόσον είναι στο Internet) ώστε να μην χάνω καμία κλήση. Ένα επιπλέον θετικό από την ιστορία του VOIP , είναι ότι κρατάει τις κλήσεις στα log files, και μπορεί να στα κάνει export σε CSV format το οποίο μπορεί να το κάνεις import όπου θες και να βγάλεις κάποια άκρως ενδιαφέροντα γραφήματα/συμπεράσματα για τις κλήσεις σου! Troubleshooting A' Το πρώτο πράγματα που κάνω συνήθως είναι ένα reset . Με μία γρήγορη ματιά δεν είδα να έχει κάποιο κουμπί, οπότε έβγαλα απλά την πρίζα. Περίμενα κανά λεπτό, και την σύνδεσα ξανά, ενώ παράλληλα έβλεπα τα LEDs του Fritz!Box. Στην αρχή, ανάβουν όλα μαζί (ταυτόχρονα), στην συνέχεια αρχίζει να κάνει blinking το Power και μετά απο λίγο … ανάβει (πάλι) το κόκκινο LED . Troubleshooting B' Δεύτερη κίνηση, για να εξακριβώσω αν φταίει το router ή η γραμμή, είναι να βγάλω όλα τα καλώδια από το Fritz!Box. Η αλήθεια είναι ότι εδώ οι Γερμανοί έχουν περίεργα βύσματα, οπότε just to be on the safe side of things , ξήλωσα τα πάντα και άφησα μόνο το καλώδιο της τροφοδοσίας. Βγάζω - βάζω το ρεύμα … πάλι τα ίδια αποτελέσματα. Τουλάχιστον μάθαμε κάτι: Φταίει το Router (η συσκευή). Troubleshooting Γ' Φέρνω λοιπόν το Fritz!Box στο σαλόνι και το βάζω στην πρίζα. Ψάχνω να βρώ το WLAN SSID μου, αλλά \"πουθενά\". Προφανώς λοιπόν, το Router δεν έχει καταφέρει να μπουτάρει. Για να είμαστε 100% σίγουροι, σκέφτηκα να το συνδέσω ενσηρματα με το Macbook Air. Ευτυχώς, πριν φύγω από Ελλάδα, αγόρασα έναν θαυματουργό Thunderbolt το Ethernet μετατροπέα, ο οποίος φαίνεται ότι δουλεύει μια χαρά. Δυστυχώς στην περίπτωσή μου, η κάρτα δικτύου του Mac δεν μπορούσε να πάρει IP . Ωστόσο, μάθαμε κάτι: Δεν μπορώ να επικοινωνήσω με το Router… Troubleshooting Δ' Η επόμενη κίνηση είναι να ψάξουμε για το γνωστό σημείο, στο οποίο χωράει μία οδογλυφίδα ή η μύτη ενός στυλό, ώστε να κάνουμε hard reset , ελπίζοντας πως η επαναφορά των εργοστασιακών ρυθμήσεων θα λύσει το πρόβλημα του κόκκινου LED . Δεν ξέρω πως τους ξέφυγε αυτή η κατασκευαστική λεπτομέρεια, αλλά πρέπει να ομολήσω ότι πρέπει να είναι τελείως ηλίθιος αυτός που ξέχασε να βάλει ένα hard-reset button στο Fritz!Box. Θέλω να πω, το routerάκι είναι τούμπανο , μέχρι και ενσωματωμένο NAS έχει πάνω…. πόσο δύσκολο ήταν να βάλουν ένα recovery button … Τι θα κάνω τώρα; Μήπως να πάω να κοιμηθώ; Χα! The night is young . Πρέπει με κάποιον τρόπο να φορτώσω το εργοστασιακό Firmware, αλλά δεν έχω Internet… Android Tethering / Hotspot Να ναι καλά το Android και το κινέζικο κινητό μου, πήγα στις ρυθμήσεις, άνοιξα το 3G και έβαλα το κινητό να εκτελεί καθήκοντα Wifi, δηλαδή να μοιράζει Internet στο δίκτυο ασύρματα. Οπότε συνδέθηκα με το Macbook και ξεκίνησα το googling . Σε λίγα δευτερόλεπτα είχα ήδη βρει το επίσημο troubleshooting για το πρόβλημα μου: Problem when updating FRITZ ! OS : Info LED flashes constantly . Η λύση που προτίνεται εδώ είναι να κατεβάσουμε το νέο firmware . Και; Πώς θα το φλασάρω ρε ξάδερφε; Αφού δεν μπορώ να επικοινωνήσω με το Router. Για καλή μου τύχη λοιπόν, υπάρχει ένα ειδικό εργαλείο από την εταιρεία, η οποία παρέχει ένα recovery reset tool για κάθε Fritz!Box μοντέλο. Ετσι λοιπόν, ανοίγω το νέο tab με τις πληροφορίες και βλέπω ότι το εργαλειο είναι συμβατό μόνο με Microsoft Windows XP …. Γαμ.. @ &&#94;&$@ $*@&&#94;@#$@$ Για κακή μου τύχη, πριν λίγες μέρες είχα σβήσει το VMWare image των Windows 7 από τον SSD , γιατί δεν είχα πολύ χώρο. Ενώ θα μπορούσα — ο ηλίθιος — να το πάρω backup στον εξωτερικό σκληρό, ο οποίος είναι 3 TB , βαρέθηκα να σηκωθώ από τον καναπέ, και δεν το έκανα. Καλά να πάθω! Lesson Learned: Πρέπει να στήσω ownCloud asap! Αφού κατέβασα λοιπόν το recovery tool , στην συνέχεια ξεκίνησα να ψάχνω για Wine ή παρόμοιους emulators των Windows στο Mac. Ε, μετά από λίγο, βρήκα έναν, και το όνομα αυτού: WineBottler . Με βαρυά καρδιά ξεκίνησα το κατέβασμα. Λέω με \"βαρυά\", γιατί τότε διαπίστωτα ότι το μέγεθος του dmg ήταν περίπου 150MB , το οποίο δεν είναι και ότι καλύτερο για το συμβόλαιο που έχω σχετικά με το mobile internet . Μάλιστα, λίγο πριν τελειώσει, μου ήρθε mail πως έχω λιγότερο από 25% προς χρήση, οπότε ήξερα ότι θα μου έμεναν MB για πολύ ακόμα… Mediasensing Συνδέω λοιπόν το fritz!box στο Mac μέσω Ethernet και τρέχω το πρόγραμμα με το Wine. Βρε απο δω, βρε απο κει … τίποτα! Έβγαζε συνέχεια ένα μήνυμα για Γερμανικά να απενεργοποιήσω το \"mediasensing\". Τι σκατά είναι το \"mediasensing\" ρε παιδια; Τέλος πάντων, μην τα πολυλογώ… βρήκα aυτό το θαυμασίο post σε ένα forum όπου λέει ότι η συγκεκριμένη επιλογή, απενεργοποιείται μέσω της Registry, πειράζοντας το SYSTEM\\\\CurrentControlSet\\\\Services\\\\TcpIp\\ \\Parameters\" /v DisableDHCPMediaSense /t REG_DWORD /d 0x1\" . Όντως λοιπόν, πηγαίνω στις ρυθμήσεις το Wine > Registry Editor και ενεργοποιώ την επιλογή. Seriously, μόνο σε μένα έκανε εντύπωση ότι το Wine έχει πλέον και Registry Editor; Error 13 Μόλις το έκανα αυτό, το error εξαφανίστηκε, και το πρόγραμμα άρχισε να φορτώνει… Αλλά (ναι κι αλλο πρόβλημα) αυτή την φορά ξεκινάει το πρόγραμμα, αλλά μου βγάζει να επιλέξω network interface στο οποίο έχω συνδέσει το router. Thankfully, η παλιά καλή εντολή ifconfig έκανε το θαύμα της, και είδα ότι το thunderbolt δουλεύει για ρόλο της en02 . Οπότε, επιλέγω αυτή, πατάω Weiter και περιμενω… καθώς περιμένω, ανοίγω το Wireshark και βλέπω ότι το πρόγραμμα στέλνει broadcast μηνύματα στο συγκεκριμένο Interface. Καμία απάντηση από το Router… το κόκκινο LED συνεχίζει να αναβοσβήνει ακάθεκτο. Σκέφτομαι λοιπόν να κλείσω και να ανοίξω το Router για μία ακόμα φορά. Ο λόγος είναι γιατί θυμήθηκα ότι στην αρχή, παραμένει το Power για 4-5 δευτερόλεπτα και μετά γίνεται παλι Info (κοκκινο). Οπότε μπορεί για αυτά τα 5-6 δευτερόλεπτα που παραμένει στο πράσινο LED , να μπορέσει να δώσει IP αν την ίδια στιγμή έχει ένα χαζό πρόγραμμα που τρέχει σε WINE και το πρίζει να κάνει acknowledgement σε κάποιο από τα μυνήματά του. Και όντως έδωσε… 169.254.1.1 Αρχίζει λοιπόν να φορτώνει μία μπάρα και να γράφει κάτι στα Γερμανικά! \"Ωραία λέω, τελείωσαν τα βάσανα!\", αλλά … (ναι πάλι \"αλλά). Recovery läuft auf mtd1 durch. Dann Fehler bei \"Restaurierung mtd3\" ; Fehler WinError-13 Das Recovery Programm bricht dann komplett ab. Μετά από καμιά 10αρια αποτυχημένες προσπάθειες, έπεσα πάνω σ'αυτό το thread. Εδώ λοιπόν λένε, να δώσω καρφωτά IP και να μην περιμένω τον DHCP . Ετσι κ έκανα: IP -Adresse: 192.168.178.2 Subnetzmaske: 255.255.255.0 Standardgateway: 192.168.178.1 Bevorzugter DNS -Server: 192.168.178.1 Εκτός από αυτό, ένα παλικάρι συμβούλευε να δοκιμάσουμε να συνδεθούμε και στην Port B αντί της Port A που κάνει αναφορά το manual. Προφανώς, μόλις πάτησα το apply το Router δεν έδωσε σημεία ζωής στην συγκεκριμένη διεύθυνση. Οπότε άνοιξα πάλι το recover tool , και μόλις ξεκίνησε να στέλνε broadcast, έβαλα/εβγαλα το ρεύμα στο Fritz!Box. Όντως, μετά από λίγα δευτερόλεπτα, το εντόπισε και ξεκίνησε το scan. Αυτή την φορά πήγε ένα βήμα παραπέρα, αλλά πάλι έβγαλε το ίδιο σφάλμα. Παίζοντας λίγο με το TCP Optimizer (ένα πρόγραμμα ) πάλι για Windows, με βοήθησε να ρυθμήσω τον ρυθμό μετάδοσης. Αρχισα λοιπόν να παίζω σε Half-Duplex και με διαφορετικά MTU . Όταν το έβαλα όμως στο αυτόματο και προσπάθησα ξανά … το recovery tool δούλεψε! Φλασάρισμα Έχοντας πλέον πρόσβαση στον πίνακα ελέγχου του Fritz!Box, πήγα και του πέρασα manually το καινούριο firmware. Για να το κάνω αυτό, έπρεπε να ενεργοποιήσω την επιλογή Ansicht: Erweitert ώστε να βλέπω περισσότερες πληροφορίες, διαφορετικά το μόνο που σου είχε είναι το Online Update. Πάω λοιπόν Sicherung > Wiederherstellen και ανεβάζω το *.image αρχείο. Εννοείται πως κατά την διάρκεια το φλασαρίσματος, είχα συνδεμένο το Fritz!Box με το Macbook μέσω Ethernet και δεν το ξεσύνδεσα παρά μόνο όταν τελείωσε και ολοκληρώθηκε ολόκληρη η διαδικασία. Τέλος καλό, Internet όμως; Για κακή μου τύχη, είχα αλλάξει τον κωδικό με τον οποίο κάνω Login στην 1und1. Οχι δεν τον ξέχασα, τον θυμάμαι μια χαρά. Το πρόβλημα είναι ότι για να συνδεθείς στο Internet (και να λειτουργήσει και το τηλέφωνο), το Fritz!Box σου ζητάει ένα StartCode, ο οποίος κωδικός γίνεται generate κάθε φορά που αλλάζεις password . Για μία ακόμα φορά, το κινητό έσωσε την κατάσταση. Μπήκα στο 1und1 login center, αλλαξα τον κώδικο, κι στο καπάκι μου έστειλαν τον νέο StartCode με τον οποίο μπόρεσα και ενεργοποιήσα τόσο το Internet όσο και το τηλέφωνο. Ηθικό Δίδαγμα: Ποτέ, μα ποτέ, μα ποτέ μην βάλετε το Router σας να κάνει αυτόματα update το firmware. Έπαθα ότι έπαθα, γιατί το Fritz!Box κάθε βράδυ στις 00:00 ψάχνει να βρει αν υπάρχει κάποια νεοτερη έκδοση. Απόψε λοιπόν βρήκε, προσπάθησε να την εφαρμόσει, δεν τα κατάφερε, και κόλλησε…","tags":"Editorial","loc":"http://drpaneas.github.io/testblog/o-epimenon-nika","title":"Ο επιμένων νικά!"},{"text":"Καλή Χρονιά και Χρόνια Πολλά φίλοι μου! Πρώτο άρθρο για το 2015 , και σκέφτηκα να ξεκινήσω με κάτι που με χαροποίησε ιδιαίτερα τις προυηγούμενες μέρες. Προφανώς και δεν αναφέρομαι στην άδεια των Χριστουγέννων ( ψέμματα ), ούτε στα Χριστουγεννιάτικα δώρα ( πάλι ψέμματα ), αλλά στον νέο μου dedicated server, τον οποίο νοικιάζω μόλις 5 Ευρώ τον μήνα!!! Επίσης, είμαι χαρούμενος γιατί αυτό είναι το πρώτο Editorial το blog. Σε αυτή την κατηγορία θα γράφω προσωπικές εμπειρίες και απόψεις που δεν έχουν να κάνουν με στεγνά how-to, αλλά είναι πιο πολύ experienced-based, και προφανώς personally biased . Ας πάμε όμως στο κυρίως θέμα: τον server! WLAN και προβλήματα… Σαν γνήσιος geek, κάθε φορά που ταξιδεύω, προσπαθώ να συνδεθώ στο WLAN του μεταφορικού μέσω του οποίου βρίσκομαι. Δυστυχώς, στην Γερμανία δεν υπάρχει σαν έννοια το Free Wifi —ενώ στην Ελλάδα, το εφάρμωσε μια χαρά ο Σαμαράς— και γενικά το \" Free \" δύσκολα το βρίσκεις ( ευλογημένα Starbucks ). Πρόσφατα λοιπόν, ταξιδεύαμε με το λεωφορείο μαζί με την Αλεξάνδρα, πηγαίνοντας προς ένα μικρό χωριό της Βάδης-Βυτερμβέργης κοντά στην Στουτγγάρδη, το Sindelfigen 1 . Εκεί μένουν οι συγγενείς μου, και τι καλύτερο από το να περνάς την Πρωτοχρονιά μαζί με τους συγγενείς σου ( emotion detected ). Ανοίγω λοιπόν το Macbook και δοκιμάζω να μπω στο Gmail μου. Δυστυχώς όμως, διαπίστωσα πως όταν έστελνα HTTP Request προς οποιονδήποτε webserver, ο gateway 10.10.10.1 μου πετούσε διάφορα άκυρα errors. Προσπάθησα λίγη ώρα κάνοντας κάποιο βασικό troubleshooting, όπως: ping -c 5 google.com (λειτούργησε μια χαρά) traceroute google.com (λειτούργησε επίσης) Αλλαγή των DNS με αυτών της Google (8.8.8.8) Καρφωτή IP κλπ Εν τέλη, δοκίμασα να συνδεθώ μέσω VPN . Για κάποιον λόγο είχα αγοράσει παλαιότερα μία υπηρεσία που μου επιτρέπει να συνδέομαι σε VPN servers ανά τον κόσμο για περιορισμένο χρονικό διάστημα. Εκείνη την στιγμή, συνδέθηκα σε κάποιον server στο Λουξεμβούργο, όπου αν και έκανε λίγη ώρα παραπάνω από ότι περιμένα, τελικά τα κατάφερα να επισκεφτώ μερικά websites. I had a moment of enlightment Εκείνη την στιγμή, αναθεώρησα πόσο σημαντικό είναι για μένα να έχω ένα VPN Server , καθώς ποτέ δεν ξέρεις πότε θα τον χρειαστείς. Βλέπετε, η αδερφή μου, είναι τόσο έξυπνη που μου ξύλωσε το Raspberry Pi, το οποίο εκτελούσε χρέη OpenVPN server στην Θεσσαλονίκη, με αποτέλεσμα να έχω μείνει ξεκρέμαστος … Η αφορμή που έψαχνα Η λύση φαίνεται να είναι ένας dedicated server. Όχι shared hosting, ούτε VPS . Θέλω έναν reference host στον οποίο να μπορώ να εγκαθιστώ, να ρυθμίζω, και να διαλύω ό,τι θέλω . Η Hetzner είναι μία από τους καλύτερους providers, αλλά αρκετά ακριβή. Οπότε έψαχνα για κάτι περισσότερο value for money . Δεν ήθελα κάτι σταθερό ή κανένα killer rig PC , και τελικά το βρήκα: KS -1 Atom™ N2800 640 2c/ 4t 1.86 GHz+ 2 GB 500 GB 100 Mbps € 4.99 χωρίς ΦΠΑ Η εταιρία λέγεται Kimsufi και διαθέτει dedicated server με 1 static IP για φοιτητές ή newbies στον χώρο του IT Administration . Αυτό ακριβώς που έψαχνα: έναν server! Για όσους ενδιαφέρονται, πρόκειται για ένα σύμπλεγμα από εταιρίες με αρχηγό την OVH . Το πράγμα έχει ως εξής: Ακριβές λύσεις: OVH >100 Ευρώ τον μήνα Μεσαίες λύσεις: So you can start >80 Ευρώ τον μήνα Φθηνές λύσεις: Kimsufi >5 Ευρώ τον μήνα Δεν πρόκειται να μπω σε λεπτομέρειες για το τι προσφέρει ο καθένας τους. Αν ενδιαφέρεστε, κάντε κλικ και διαβάστε. Αν και είναι στα Γερμανικά, μπορείτε να αλλάξετε region και γλώσσα ( πχ Ιρλανδία ή Αγλλία ). Διαρκώς \"Sold out\"! Για αρκετό χρονικό διάστημα επισκεπτόμουν συχνά-πυκνά το website της Kimsufi και περιμένα να δω πότε θα είναι διαθέσιμος ο server των 5 Ευρώ. Δεν βιαζόμουν ιδιαίτερα, κι έτσι το πήρα χαλαρά στην αρχή. Randomly, έριχνα καμιά ματιά, αλλά για κακή μου τύχη ποτέ μα ποτέ δεν ήταν διαθέσιμος για αγορά. Η αλήθεια είναι όμως πως μετά το περιστατικό στο λεωφορείο, βρήκα την αφορμή που έψαχνα και τότε ήταν που αρχίσα να προβληματίζομαι και να χάνω την υπομονή μου. Αντί να το αφήσω στην τύχη του, σκέφτηκα να γράψω ένα script που θα κάνει την δουλειά για μένα. Η δουλειά του θα ήταν να επισκέπτεται το website και να βλέπει αν είναι διαθέσιμος ο server, και όταν θα είναι να μου στείλει mail. Το πρόβλημα σε όλα αυτά είναι ότι είμαι υπερβολικά τεμπέλης για να το κάνω σωστά. Ένας κανονικός προγραμματιστής θα έγραφε έναν HTML Parser ή ακόμα καλύτερα θα χρησιμοποιούσε μία έτοιμη βιβλιοθήκη της Python. Αλλά στην δική μου περίπτωση, τα πράγματα ήταν διαφορετικά. Ήθελα να γράψω ένα script μέσα σε 5 λεπτά, more or less . Οπότε, η όλη διαδικασία ήταν τελικά ως εξής: Inspect Element Κάνοντας \" Δεξί κλικ \" στον Google Chrome ( αλλά και σε άλλους browsers ), υπάρχει μία επιλογή που λέει Inspect Element . Παίζοντας λοιπόν τον Sherlock Holmes , άρχισα να εξερευνώ το HTML template της σελίδα του Kimsufi. Μιας λοιπόν που ο server των 5 ευρώ δεν ήταν διαθέσιμος, η προσοχή μου στράφηκε σ'εναν άλλον, πιο ακριβό,που όμως ήταν διαθέσιμος: Με άλλα λόγια, υπήρχε \"Buy Button\"! Συγκεκριμένα, με ενδιέφερε να δω αυτό ακριβώς: <a href= \"https://www.kimsufi.com/en/order/kimsufi.cgi?hard=150sk40\" class= \"order-button\" ><span></span></a> Όπως βλέπετε, οι σελίδες των server προς αγορά είναι hardcoded . Αυτό σημαίνει ότι το URL δεν παράγεται dynamically αλλά είναι static δηλωμένο στο εκάστωτε Buy Button . Το αν θα φαίνεται το Buy Button ή όχι, αυτό είναι δουλειά της Javascipt με λίγο \"if-else\". Μιας λοιπόν που τα links ήταν όλα visible στον κώδικα, βρήκα ότι το link του server μου είναι το εξής: https://www.kimsufi.com/en/order/kimsufi.cgi?hard=150sk10 Το πρώτο πράγμα που έκανα είναι να επισκεφτώ την παραπάνω σελίδα . Εκεί είδα ότι ο server δεν είναι διαθέσιμος, και συγκεκριμένα παρατήρησα ότι γράφει Error . Θαυμασια νέα! Οπότε το μόνο που είχα να κάνω είναι να βάλω ένα script να κατεβάζει τον HTML κώδικα αυτής της σελίδας και να ψάχνει να βρει αν υπάρχει το string error . Αν το βρεί, τότε αυτό θα σημαίνει πως ο server δεν είναι διαθέσιμος. Αν δεν υπάρχει, τότε σημαίνει ότι ο server είναι διαθέσιμος για αγορά! Άρα σε πρώτη φάση έγραψα κάτι τέτοιο: wget https://www.kimsufi.com/en/order/kimsufi.cgi?hard = 150sk10 -O foo.html if cat foo.html | grep \"1 Error\" ; then echo \"Αδερφέ, δεν είναι έτοιμο\" ; else echo \"Αγόρασε ΤΩΡΑ!!!\" ; fi ; Για να είμαι ειλικρινής, την πρώτη φορά, έβαλα echo εντολές, ώστε να ξέρω τι συμβαίνει. Αφού βεβαιώθηκα ότι το grepping λειτουργεί έτσι όπως θα έπρεπε, μετά αντικατέστησα τα echo με τις κανονικές εντολές. wget https://www.kimsufi.com/en/order/kimsufi.cgi?hard = 150sk10 -O foo.html if cat foo.html | grep \"1 Error\" ; then echo \" /dev/null\" ; else echo \"Dedicated Server available\" | mail -s subject drpaneas@gmail.com ; fi ; Τέλος, ανακατεύθυνα και το output από το grep στο /dev/null για να μην με πρίζει κάθε φορά που το τρέχει και βρίσκει το error. Μην ξεχνάτε ότι εμένα με ενδιαφέρει μόνο μία συνθήκη: αυτή που αποτυγχάνει να βρει το error, γιατί τότε σημαίνει ότι δεν υπάρχει error, άρα το link θα είναι διαθέσιμο, άρα ο server διαθέσιμος προς αγορά! wget https://www.kimsufi.com/en/order/kimsufi.cgi?hard = 150sk10 -O foo.html if cat foo.html | grep \"1 Error\" > /dev/null ; then echo \" /dev/null\" ; else echo \"Dedicated Server available\" | mail -s subject drpaneas@gmail.com ; fi ; Εννοείται ότι αντί να κάτσω να σετάρω το postfix για να στέλνω mail από το terminal χρησιμοποιώντας το GMail ως mail-server, προτιμήσα να \" μαρκάρω \" τα μηνύματα από το localhost ως μη spam . Οπότε πλέον μπορούσα να στείλω mail απο το terminal και να το λάβω το Gmail Inbox χωρίς να το πετάξει το Filter στα spam. Στην συνέχεια ενεργοποιήσα το Smartphone μου να κάνει θόρυβο όταν δέχομαι e-mails, και τελειοποίησα το ήδη πρόχειρο script γράφοντας μία λούπα που θα επαναλαμβάνει τον παραπάνω έλεγχο άνα λεπτό. #!/bin/bash while : do wget https://www.kimsufi.com/en/order/kimsufi.cgi?hard = 150sk10 -O foo.html if cat foo.html | grep \"1 Error\" > /dev/null ; then echo \" /dev/null\" ; else echo \"Dedicated Server available\" | mail -s subject drpaneas@gmail.com ; fi ; rm *.html sleep 60 done Προφανώς και το παραπάνω script αποτελεί ότι χειρότερο μπορεί να γράψει ποτέ Linux Programmer, καθώς είναι τελείως ηλίθιο! Για παράδειγμα, αν αποτύχει το SSL connection (βλ. το https στο link) αυτό σημαίνει ότι το wget θα κατεβάσει garbage HTML , στην οποία δεν θα υπάρχει το 1 Error για το οποίο κάνω grep , και έτσι θα μου στείλει λανθασμένα e-mail λέγοντας μου Dedicated Server available . Αλλά είπαμε, μην ξεχνάτε, το script αυτό γράφτηκε με γνώμονα 2 πράγματα: 5 λεπτά Ένα γρήγορο hack να κάνει την δουλειά (έστω και πρόχειρα) Και όντως, μετά από 1 μέρα, καθώς ήμουν στην δουλειά, χτυπάει το κινητό μου! Βλέπω mail από το terminal, και κατευθείαν επισκέπτομαι το link. Μην σας τα πολυλογώ παιδιά, μέσα σε 3 λεπτά έκανα Register και ολοκλήρωσα την αγορά πληρώνοντας μέσω Paypal. Σε 5 λεπτά, 120 servers των 5 Ευρώ είχαν ήδη γίνει sold out! Insomnia και διαγωνισμός Εδώ και αρκετά χρόνια παίρνω μέρος σε διάφορους διαγωνισμους που γίνονται σε γνωστά Forums, αλλά ποτέ δεν έχω κερδίσει κάτι. Ε, αυτή την φορά \"έσπασε η γκίνια\" και κέρδισα ένα eu domain από την IP Host , το οποίο ονόμασα pingouinos.eu . Την κατάλληλη στιγμή λοιπόν ήρθε και το domain, ώστε να μην έχω να θυμάμαι απ'έξω την IP Address ή το hostname . Κάποια μέρα λοιπόν μέσα στην εβδομάδα έχω σκοπό να κάτσω να δω πως μπορώ να αλλάξω τους name servers στην IP Host ώστε να \" βλέπεi \" απευθείας τον νέο μου, φθηνό dedicated server :) Σημείωση : Να θυμηθώ να ενεργοποιήσω το SSH . What's the catch ? Μετά από 7 περίπου ώρες, η εταιρία επαλήθευσε τα στοιχεία μου και μου έστειλε τα credentials για login. Υπάρχει μία τεράστια λίστα από Linux distro και FreeBSD προς εγκατάσταση ( one click install ) καθώς και ένας πολύ απλός Panel για Monitoring. Για τα 5 Ευρώ, η Kimsufi δεν σου βάζει κάποιο bandwidth limit, αλλά προφανώς αν αρχίσεις να επιβαρύνεις το δίκτυο θα σου πει \"κανά δύο λογάκια\". Δεν παρέχει κανενός είδος support, κάτι που είναι λογικό για την τιμή. Είναι τρελοί Αυτοί οι Βόρειοι Ο server μου βρίσκεται σ'ένα Datacenter στην Γαλλία, και συγκεκριμένα σε μία περιοχή που λέγεται \"Nord-pas-de-calais\". Μόλις το διάβασα, θυμήθηκα αμέσως την γνωστή Γαλλική κωμωδία Είναι τρελοί αυτοί οι Βόρειοι . Αν και δεν είμαι fan του Γαλλικού κινηματογράφου, αυτή η ταινία έχει πολύ γέλιο. Αν δεν την έχετε δει 2 , αξίζει να την δείτε, θα σας φτιάξει την διάθεση και θα περάσετε ένα όμορφο βράδυ. Για όσους έχετε δει την ταινία, φανταστείτε να πάρω τηλέφωνω στην τεχνική υποστήριξη και να αρχίσουν να μου μιλάνε Σετεμί ! Σε περίπτωση που περάσουν οι 30 μέρες και ξεχάσετε να ανανεώσετε την συνδρομή σας, τότε γίνεται αυτόματα format. Ω ναι, δεν σας ρωτάνε ξανά και ξανά όπως κάνουν στο GoDaddy. Δεν τους ενδιαφέρει, δεν ασχολούνται! Οπότε, μην ξεχάσετε να ανανεώσετε την συνδρομή σας, διαφορετικά ο server σας θα βγει άμεσα στο σφυρί στην επόμενη κλήρωση, και θα γίνει άμεσα sold out :) Εκεί βρίσκεται το εργοστάσιο της Porsche. Διαβάστε περισσότερα ↩ Δείτε το trailer ↩","tags":"Editorial","loc":"http://drpaneas.github.io/testblog/new-dedicated-server-in-da-house-me-5-euro","title":"New dedicated server in da house με 5 Ευρώ"},{"text":"Ντεμπούτο του Linuxed! Αναρωτιώμουν από πού να ξεκινήσω το άρθρο μου, αλλά σήμερα νιώθω ότι έχω πολλά να πω, και θέλω να αποφύγω να ξεκινάω να σας γράφω για το ένα και για το άλλο και να αφήνω το σημαντικό στο τέλος. Αποφάσισα λοιπόν αντί άλλων καθυστερήσεων να μπω κατευθείαν στο κυρίως κείμενο… με μία μικρή εισαγωγή … Αν είστε fan του LoTR , φαντάζομαι πως θα θυμάστε την σκηνή 1 που ο Gandalf μπαίνει μέσα στο Bag End και ρωτάει τον Frodo: \" Is it secret? Is it safe? \". Στην συνέχεια, ο Frodo επιβεβαιώνει τα λεγόμενά του, δείχνοτας πως το δαχτυλίδι παραμένει σφραγισμένο μέσα στον φάκελο. Προφανώς, για όλους εμάς, ένας φάκελος και μια σφραγίδα, δεν καλύπτουν τα σημερινα security standards. Οπότε, για όλους εμάς, το δαχτυλίδι δεν είναι ούτε secret , ούτε safe , αλλά βλέπετε, εκείνη την μυθική εποχή της Μέσης Γης , οι μάγοι και άλλα πλάσματα του Eru Ilúvatar, δεν είχαν PC ή Internet. Αντίθετα σήμερα, οι μάγοι της εποχής μας έχουν τα δικά τους εργαλεία και είναι γνωστοί ως Hackers. Αυτό όμως είναι μία ιστορία, θα πούμε άλλη φορά! Keep it secret, Keep it Safe Το βασικό μου πρόβλημα ξεκίνησε όταν θέλησα να στείλω ένα αρχείο από τον server μου στην Ελλάδα στο macbook μου εδώ στην Γερμανία. Λοιπόν, για να πούμε τα πράγματα με το όνομά τους: Δεν ήταν ένα οποιοδήποτε αρχείο. Δεν μπορώ να σας πω \"τι είναι\" και \"τι δεν είναι\", καθώς η κρυφή του ταυτότητα θαρρώ πως δίνει ένα \"μυστικό τόνο\" στο άρθρο. Αυτό δε σημαίνει ότι είναι μυστικό και σ'εμένα, μια χαρά ξέρω \"περί\" ποιου αρχείου πρόκειται. Κατά μία έννοια θα μπορούσε να πει κανείς ότι κ εσείς ξέρετε, ακόμα κι αν δεν έχετε άμεση πρόσβαση στο μυαλό μου ή τον υπολογιστή μου, μπορείτε να κάνετε εικασίες. Καταλαβαίνετε που το πάω; Μπορεί να (μην) ξέρετε για ποιο αρχείο σας μιλάω, αλλά για όσους με ξέρουν και \"το μυαλό τους πηγαίνει κατά κει\", να ξέρουν οτι δεν θα το βρουν. Unsurprisingly, την ίδια μοίρα μ'εσάς, θα έχει και η Deutsche Telekom και η NSA που έχουν\"έχει στήσει αφτί\" αμφότεροι στο τέλος της γραμμής. Όχι, δεν μπορεί και δεν θα μπορέσει ποτέ κανείς να μάθει για ποιο αρχείο σας μιλάω. Μπα. Με τίποτα 2 . Αν προσπαθείσετε να δείτε τα περιεχόμενα του αρχείου: $ cat file θα δείτε κάτι τέτοιο: Salted__???~?B? '?`c?g<?)/g&??????[?<???O?d?S??~?q???Ѫi??C?? \"?Fz@????\\pg????2?i|?f??L?>?d{?:*???????v??K?\"?Y?̷?p?Z???(?Q???????*dme???Fgۦ? ?? c??n?[Bo?r?&#94;?;L+!? %7?L?*?Qr?Plb?b{Y /?1[?=,﹯?}8K?rP?Ņ??U????f\"{Ǒ? ?-?&??O[????m?Qw$???҈R?(?] ??6;yQ??Wy)?FO?K?*I??URZ?l2)Xʓ????N?%??Q-??d??{??U?o ?ڎ?;U' ?i?eR?/?R~??? ` ???NM<?ԡ | 0o = ?P??9?̢j?/?? ?3?v?S?o '?????۬?GM?X϶?&#94;??OVr?\"????\\&L.?V8\\|??b??????ՉJ?)????9;+??SC?c?㱶?]??\\$?7G6??W??j??!l??$?_UO?i??H?H??? ??IHq??:?M ?G??I(4??/??S:Ӷ???Z?z??????E?9' ?a? ( U߃D?Ny5???hD????@Z2U<?ɽ? sx?ϴ#??????W1? '?T??|=ы?5?d?$?}?쪯YX(J/?}2?' xx?t??Q#?@?>c {{ ????Dd5?? & ?~?lBmR? ?jf?????@n?R??թG???T?I_W?? ( ??????wQ? ) q,?6M? ( ?w $? ??ᬥ???1??uxc,9 ( ??*t1??yh??+U?? ?d??NL?8?ȴ?/? '?OLa??z?&J9DR\\c??f?%??sÒu???? )s?9?f?x??E???\\q???l??;?9 ???!L?z?%?})?(??a?}?>_?-?_?????&???R?XQ?x??U?C7?Z?:`F)@[?W5u??je??$??$`&??3?[jF ¡?R??#??a??w?@ q|y6??5??*&??Vw?9}???om?a?_8??M0?!???c??h?}};گ?#?G?ĩ? ??BVJ&#94;Ґ?V9 H???*W6?kE??????Ơ Zp]F86?b?8?5?8?N?,?N???1' .??1???:??%@ = ?I@??????? '?OW?s?u?O?ꨯm??s?Mwzq???????????*?ƾx1V4???.?Ր???87??e ??ܢO?r???DՁZ?1????Y7?WQE?ְ?X?Ps??Gseݍ 8?wP?)??/%????}?`?Has?I?B?l' ????+ ?ۖF ?L? ?F?rT? ) ?e { ?#&#94;m!IO??0P?3????_4Kgϗ, \\? ??D???????8 ; ???H?q ????nTdZS???_??? | \\߷ ?t???P? ?.???t?0c: = ?3yney#E??D?~?5????؅????أ8% .?U?l!6 & q4 $i ???8?ЕP7F | Ԃ0Q????:??C???B?y??Ә*WW?j>V貺???Vi5uwyc??7% [ ? ???s $? N???p?? \\r i5xza??? & l? \"o@?T?몜??o#u? $H ??? /O?F?\" ?R@n??6?o??8?:??Άf?. | ?????9P??n >? ` ?O $* ?????x????ã?? ) ??5?D? { v???Q & ?Q??????9??j *- ?Zxߚ?A?U?O?v>j?g??-?> & :??i? ] ??????5 $a ?9?U+????셴<+???k??r $O ? ; x:???l = ?B4arp? ??B??4?@?? [ ?3N?q??!h???g ` ?pJ6???뭁????N??#??q??/???>?Q??#??ҧ?Q?W?????L??5xVnلΐ ?? ( ? \"t?7???ň=?MH?O??c?sbF?@a??#?aK,?Q?q??b??Z ͊?F??g%܅??1v?? $ Οι παραπάνω \" ασυναρτησίες \" οφείλονται στο γεγονός ότι το αρχείο είναι κρυπτογραφημένο ( encrypted ). Και ένα αρχείο, μη προσπελάσιμο, είναι τελείως άχρηστο. Για να το αποκρυπτογραφίσετε, θα πρέπει να γνωρίζετε την τέχνη του OpenSSL, καθώς και κάποια άλλα πράγματα, όπως: τον Cipher και το passphrase . Κρυπτογράφιση με το OpenSSL Βήμα 1: Ενεργοποιήστε την κατάσταση κωδικοποίησης αρχείου The openssl program is a command line tool for using the various cryptography functions of OpenSSL's crypto library from the shell. It can be also used for file encryption and decryption with Ciphers 3 . Για να χρησιμοποιήσουμε αυτή την λειτουργία, αρκεί να δώσουμε την παράμετρο enc . enc – Encoding with Ciphers. Βήμα 2: Επιλέξτε το αρχείο που θέλετε να κρυπτογραφίσετε Στην συνέχεια θα επιλέξουμε το αρχείο που θέλουμε να κρυπτογραφίσουμε ( για λόγους ευκολίας, ας ονομάσουμε το αρχείο με το προτώτυπο όνομα που είμαι σίγουρος ότι δεν έχετε ξαναδει ποτέ μπροστά σας foo.bar ). Αυτό λοιπόν πρόκειται να παίξει τον ρόλο του input file , γεγονός που δηλώνεται με την παράμετρο -in . Με την ευκαιρία, ας δούμε μερικές από τις επιλογές που μπορείτε να συνδυάσετε παρέα με την παράμετρο enc : -in input file -out output file -pass pass phrase source -e encrypt (by default) -d decrypt -k passphrase is the next argument Βήμα 3: Κρυπτογράφιση ή Αποκρυπτογράφιση; Το επόμενο βήμα είναι να ορίσουμε τι θέλουμε να κάνουμε με το αρχείο: + Encryption -e ή + Decryption -d . Κάπου διάβασα, ότι η μεγαλύτερη παγίδα της σκέψης είναι αυτή του αυτονόητου, αλλά εδώ δεν χρίζει λόγος ανησυχίας. By default λοιπόν, χρησιμοποίεται η σημαία -e , την οποία δεν δείτε να την χρησιμοποιούν ιδιαίτερα ( όσο λιγότερα, τόσο το καλύτερο ). Οπότε, η επιλογή -e είναι optional με την προϋπόθεση ότι η πρόθεσή σας είναι να κρυπτογραφίσετε το αρχείο. Για να ολοκληρώσετε την κρυπτογράφιση του αρχείου, το μόνο που μένει είναι να δηλώσετε άλλα δύο πράγματα: Cipher (δηλαδή τον αλγόριθμο) Passphrase 4 (κλειδί) Βήμα 4: Επιλογή αλγορίθμου Για να κρυπτογραφίσουμε ένα αρχείο, χρειαζόμαστε έναν Cipher . Χωρίς να θέλω να πρωτοτυπήσω θα χρησιμοποιήσω τον: aes-256-cbc . Βήμα 5: Επιλογή κλειδιού Για passphrase (symmetric key) θα χρησιμοποιήσουμε την επιλογή -k . Χμμμ, για να σκεφτώ… ok I figured out, το passphrase μου θα είναι darthvader666 . Αν και σας είπα ότι έχουμε μόνο δύο πράγματα (τον αλγόριθμο και το passphrase), η αλήθεια είναι ότι μένει κάτι ακόμα. Υποθέτω, ότι δεν φαντάζει λογικώς ορθό να κάνουμε edit ένα αρχείο και — at the same time — να το κάνουμε replace. Συνεπώς, χρειαζόμαστε ένα output file το οποίο θα είναι το τελικό αποτέλεσμα (δηλ. το κρυπτογραφημένο αρχείο ). Για να το πω πιο απλά, είναι το αντίστοιχο του \" save as \". Για να το κάνουμε αυτό από γραμμή εντολών, το OpenSSL διαθέτει στο ρεπερτόριο εντολών του την επιλογή -out . Για να δούμε λίγο ολόκληρη την εντολή: openssl enc -in foo.bar -e -aes-256-cbc -k darthvader666 -out foo.bar.enc Οπότε, ακόμα κι αν κάποιος υποκλέψει το αρχείο foo.bar.enc (το enc απλά δηλώνει ότι το αρχείο είναι κρυπτογραφημένο. Ο λόγος που το βάζουμε είναι για να ξέρουμε εκ των πρωτέρων ότι το αρχείο είναι encrypted και τίποτε άλλο). Διαφορετικά, αν προσπαθήσει να το ανοίξει κάποιος τρίτος, θα δει \" ασυναρτησίες \". Παρατηρήστε το salted στην αρχή της πρότασης. Σημαίνει ότι το αρχείο είναι encrypted. Αποκρυπτογράφιση με το OpenSSL Η λύση για να αποκαλυφθούν τα περιεχόμενα του αρχείου βρίσκεται στην αντίστροφη λειτουργία της κρυπτογράφισης ή αλλιώς: απο κρυπτογράφισης ( decryption ). Αν δεν υπάρχει κρυπτογραφημένο αρχείο , δεν υπάρχει λόγος για αποκρυπτογράφιση . Αν δεν υπάρχει λόγος για αποκτυπρογράφιση, τότε γιατί ταλαιπωρούμαστε; Να σας πω γιατί ταλαιπωρούμαστε: Ταλαιπωρούμαστε, αγαπητοί μου, γιατί ως άνθρωποι του Internet, είμαστε εκτεθημένοι σε ξένα μάτια. Μάτια που βλέπουν μέσα από τα καλώδια. Αν λοιπόν, έρθει μία στιγμή στην ζωή σας (πχ δουλειά) όπου θέλετε να κρατήσετε τα μάτια των άλλων μακρυά από ένα συγκεκριμένο αρχείο, τότε θα χρειαστείτε όλα αυτά για τα οποία σας μιλάω σ'αυτό το άρθρο. Καλύτερα τώρα; Αλλα πείτε μου, ποιός ο λόγος να κρυπτογραφίσω ένα αρχείο αν δεν μπορώ να το διαβάσω ούτε εγώ ο ίδιος (;). Για να κάνουμε decrypt λοιπόν, αρχικά θα χρησιμοποιήσουμε τα ίδια filenames αντίστροφα (είσοδος -> έξοδος) καθώς επίσης και την παράμετρο -d . Για να δούμε ολόκληρη την εντολή: openssl enc -in foo.bar.enc -d -aes-256-cbc -k darthvader666 -out foo.bar Και τώρα, αν προσπαθείσετε να δείτε τα περιεχόμενα του αρχείου: cat foo.bar Θα δείτε επιτέλους τα περιεχόμενα και τις πληροφορίες που έκρυβε όσο ήταν κρυπτογραφημένο: This file contatins super important stuff. Use it wisely: * FBI Password: paok * CIA Password: mpaok Συνοψίζοντας Αν το όλο άρθρο σας κέντρισε το ενδιαφέρον με την κρυπτογράφιση, θα σας πρότεινα να μελετήσετε το concept των public & private keys . Καθώς και το αντίστοιχο course στο Coursera. Όχι, δεν σας δίνω το link 5 γιατί βαριέμαι, αλλά γιατί περιμένω να ενεργοποιήθειτε και να ψάξετε! Run Forest! Run! 6 Δείτε το βίντεο στο youtube ώστε να καταλάβετε για ποια σκηνή σας μιλάω. ↩ Κάτι τέτοια διαβάζω, και σκέφτομαι αν η χρήση του χρονικού επιρρήματος \" ποτέ \" ήταν σωστή σ'αυτή την περίπτωση. Υπερβολές! ↩ Για την ώρα SSLv3 και v2 θεωρούνται vulnerable (βλ. Exploiting Poodle SSLv3 ) οπότε γενικά προτείνουμε TLS 1. Ωστόσο, η πλήρης λίστα βρίσκεται εδώ ↩ Μάθετε σχετικά με το Συμμετρικό κλειδί ↩ ή πιο απλά, let me google that for you ↩ Ε, μη μου πείτε ότι δεν έχετε δει την συγκεκριμένη σκηνή από την ταινία Forest Gump ↩","tags":"How-to","loc":"http://drpaneas.github.io/testblog/pos-mporo-na-kano-encrypt-kai-decrypt-arxeia-xrismopoiontas-to-openssl-toolkit","title":"Πώς να κάνω encrypt και decrypt αρχεία χρησιμοποιώντας το OpenSSL toolkit"},{"text":"Elegant supports Favicon, Opera Speed Dial, and shortcut or launcher icons on Apple iOS and Android devices. These are disabled by default to avoid unnecessary HTTP requests on sites that do not use them. To enable, set USE_SHORTCUT_ICONS in your configuration USE_SHORTCUT_ICONS = True Place your images in content/theme/images directory, and define STATIC_PATHS variable in your configuration STATIC_PATHS = [ 'theme/images' , 'images' ] Your images should have these names, apple-touch-icon-152x152.png apple-touch-icon-144x144.png apple-touch-icon-120x120.png apple-touch-icon-114x114.png apple-touch-icon-76x76.png apple-touch-icon-72x72.png apple-touch-icon-57x57.png apple-touch-icon.png favicon.ico I highly recommend you to use Iconifier.net to generate the set of images.","tags":"Elegant - Pelican Theme","loc":"http://drpaneas.github.io/testblog/how-to-set-shortcut-icons","title":"How to set Shortcut Icons"},{"text":"Pelican Configuration These are the settings that will help you get the most out of Elegant 1 2 3 4 5 6 7 8 9 TAG_SAVE_AS = '' AUTHOR_SAVE_AS = '' CATEGORY_SAVE_AS = '' STATIC_PATHS = [ 'theme/images' , 'images' ] PLUGINS = [ 'sitemap' , 'extract_toc' , 'tipue_search' , 'neighbors' , 'assets' , 'share_post' ] MD_EXTENSIONS = [ 'codehilite(css_class=highlight)' , 'extra' , 'headerid' , 'toc(permalink=true)' ] DIRECT_TEMPLATES = (( 'index' , 'tags' , 'categories' , 'archives' , 'search' , '404' )) Configuration Variables These are the optional configuration variables that you can define PROJECTS used for Projects feature on the landing page USE_SHORTCUT_ICONS used for shortcut icons like favicon, Opera Speed Dial SITE_LICENSE used to add site license SITE_SUBTITLE used to add site subtitle in the footer COMMENTS_INTRO used with comments SITE_DESCRIPTION used for Search Engine Optimization LANDING_PAGE_ABOUT used for About me feature on the landing page SOCIAL_PROFILE_LABEL used with social media profiles widget RECENT_ARTICLES_COUNT see the post Recent Articles These are the variables used for Mailchimp subscriber form in the sidebar, MAILCHIMP_FORM_ACTION is mandatory. Set it to your Mailchimp form action URL SUBSCRIBE_BUTTON_TITLE EMAIL_FIELD_PLACEHOLDER EMAIL_SUBSCRIPTION_LABEL These are the variables used with different Pelican plugins, SERIES_TITLE used with multi_part plugin SHARE_POST_INTRO used with share_post plugin RELATED_POSTS_LABEL used with related_posts plugin These are the variables used for Social Media Optimization , FEATURED_IMAGE TWITTER_USERNAME GOOGLE_PLUS_PROFILE_URL Blog onCrash=Reboot(); uses Elegant theme. You can see its configuration files at Github for inspiration. Metadata Pelican uses file metadata from your articles and pages text files to get information about your posts, like tags, authors etc. On top of \"official\" metadata, Elegant uses some optional metadata that you can use in your articles and pages. summary used for Search Engine Optimization subtitle used to set article subtitle keywords used for Search Engine Optimization modified used to set last updated time of the article series_title used with multi_part plugin featured_image used for Social Media Optimization comments_intro used with comments share_post_intro used with share_post plugin disqus_identifier used with comments","tags":"Elegant - Pelican Theme","loc":"http://drpaneas.github.io/testblog/configuration-variables-and-metadata-list","title":"Configuration Variables and Metadata List"},{"text":"Here are few more features that make Elegant a unique and powerful theme for Pelican powered blogs. Add License to your Site You can put your license string in SITE_LICENSE . It will appear in the footer of every page of your site. Here is how license of my site looks like, Site Subtitle You can also define SITE_SUBTITLE , it appears in the footer, before site license. Web Safe Fonts Elegant uses commonly available typefaces in every style rule. It has a list of closely matching fonts in the fallback list. For examples Baskerville is the first choice for headings. But if reader does not have Baskerville installed, Garamond will be used. If that too fails then Georgia will be used.","tags":"Elegant - Pelican Theme","loc":"http://drpaneas.github.io/testblog/few-more-features-of-elegant","title":"Few more features of Elegant"},{"text":"Pelican uses Disqus for comments. You have to set DISQUS_SITENAME to Disqus site name identifier in configuration to enable comments. But that's not all. Elegant raises the notch up with following unique features. Invite Visitors to Comment Instead of just throwing in comments form at the end of every article, Elegant offers you a way to write introductory text that would appear right before comments. Set your message to comments_intro in the article metadata. You may also define COMMENTS_INTRO in Pelican configuration. Write whatever you think is appropriate to invite the visitor to comment. Be creative! You can even put a link to your twitter account or newsletter there. Elegant first looks for comments_intro in article metadata, then for COMMENTS_INTRO in configuration. If it finds neither then no message is displayed. Disqus Thread ID Most Pelican themes pass article URL to Disqus as the Disqus identifier . This puts you at a disadvantage. If you are forced to change URL of an article you will lose Disqus discussion for that article because Disqus identifier for the article will change too. Elegant offers you disqus_identifier property that you can set in your article metadata. Set it to any unique string you want. It won't be effected by the article URL . If you choose not to use disqus_identifier , Elegant passes article URL to Disqus.","tags":"Elegant - Pelican Theme","loc":"http://drpaneas.github.io/testblog/how-to-use-disqus-comments-elegantly","title":"How to use Disqus Comments \"Elegantly\""},{"text":"Multi parts is a useful plugin that lets you write \"multi-part\" articles. To mark articles that belong to the same series, define parts metadata. :parts: iCloud 101 Series Elegant shows the multi-part series in the sidebar. Articles are sorted by their date in ascending order. The oldest article is considered \"Part 1\" and so on. The currently opened article is displayed in italics. In the above example, \"Part 2\" is opened in the browser tab. Title attribute of html anchor tag <a> is set for each \"Part\" to its article title; it is displayed when user hovers over the link. As all other features, Elegant has some tricks up its sleeve. Series Title By default Elegant uses value of parts as the title of the series. You can define series title for your multi-part articles series. Define series_title in your articles metadata, like, :parts: iCloud 101 Series :series_title: iCloud for Dummies And this will give you, You have to make sure series_title metadata is set for every article in the series. You can also define SERIES_TITLE in your Pelican configuration to set a default value for multi_part widget label. Elegant first looks for SERIES_TITLE in configuration, then series_title in the article metadata, then parts metadata which it uses as the last resort. I recommend you to let Elegant use parts instead of series_title and SERIES_TITLE . With series_title you will have to deal with the hassle of making sure all articles in the series have it, which you are already doing for parts . So why double the hassle? With SERIES_TITLE you won't be able to have custom titles for the series'.","tags":"Elegant - Pelican Theme","loc":"http://drpaneas.github.io/testblog/how-to-use-multi-part-plugin","title":"How to use Multi Part plugin"},{"text":"Search Engine Optimization( SEO ) is a moving target which is often misunderstood. Rise of social media has changed the traditional SEO techniques. Changes in search algorithms has made several SEO tecniques obsolete. Elegant does its best to leverage all available search and social media tags to give your site higher ranking in search results and optimize it for sharing via social media. Social Media Optimization ( SMO ) Inspired by the post \"What is the New SEO ? Pubcon 2013 Takeaways\" , I looked into the tags that social media sites use. They can be broadly divided into two categories, Open Graph protocol and Twitter Cards . Open Graph protocol Elegant uses following tags, og:url is set to article URL og:type is set to \"article\" og:title is set to article tile and optional subtitle og:site_name is set to SITENAME from your Pelican configuration og:description is set to article summary og:article:author is set to article author og:article:published_time is set to article date og:image is an optional tag. It is set to value of featured_image featured_image should be the complete URL of an image. This image is displayed with the article link on most social sites. Elegant looks for it first in the article metadata, here is metadata for an example reST formated file. :featured_image: http://oncrashreboot.com/images/article-1-image.jpg Then it looks for FEATURED_IMAGE in Pelican configuration. If it finds neither, og:image is not used. If you want to use og:image tag then make sure you define featured_image in your article metadata. You should also define FEATURED_IMAGE in your Pelican configuration to be used as a generic image in case an article does not have featured_image defined. Twitter Cards Elegant uses following tags, twitter:card is set to \"summary\" twitter:title is set to article title and optional subtitle twitter:creator is set to TWITTER_USERNAME if defined in Pelican configuration twitter:description is set to article summary twitter:image is set to featured_image . The featured_image discussion above is also applicable in this case Please note you need to be approved by Twitter before you can start using Twitter Cards. Search Engine Optimization ( SEO ) Elegant puts tags and category of your article in keywords tag <meta name=\"keywords\" . You can add your own keywords by defining keywords in article metadata. SITE_DESCRIPTION and article summary is used in description tag <meta name=\"description\" . Your AUTHOR name is used in copyright tag <meta name=\"copyright\" . Google+ On the topic of Google+, article \"What is the New SEO ? Pubcon 2013 Takeaways\" has this to say, Regardless of your opinion of Google the company or Google+ the service, using Google+ as a channel for social signaling, content distribution, and traffic is a requirement going forward. Also, To take advantage of this today you've got a few options. As an author you create a Google+ profile and link to this profile from every site you publish on using the tag rel=\"author\". Then, through your \"about\" page on Google+, you can reference the domains you publish to, completing the Google+ authorship link. In view of these recommendations, Elegant lets you link to your Google+ profile using rel=\"author\" . Assign your Google+ profile link to GOOGLE_PLUS_PROFILE_URL in Pelican configuration and you are done. Google help article \"Author information in search results\" mentions one more way of linking - use a verified email address. Use whichever way suits you.","tags":"Elegant - Pelican Theme","loc":"http://drpaneas.github.io/testblog/search-engine-and-social-media-optimization","title":"Search Engine and Social Media Optimization"},{"text":"You need to update your articles time and again. Sometimes it makes sense to display the date when you updated the article. You can show the last updated date of the article by defining modified in your article metadata. This is how it is displayed in the side bar, Pelican post version 3.3 has a new modified metadata . Type of its value is datetime . Depending on your DATE_FORMATS setting you can put modified date in your reST formated file as :modified: 2014-01-22 14:30 Elegant will process it and display the last updated as \"Jan 22, 2014\". Previous versions do not have modified metadata in which case type of its value is string. If you are using old version of Pelican, i.e 3.3 or less, make sure you assign it a value exactly the way you want it to appear. Taking the example from above, metadata in your reST formated file should be, :modified: Jan 22, 2014 You can also assign raw HTML to it. For example, :modified: <a href= \"https://github.com/talha131/onCrashReboot/\" title= \"Revision History\" > Aug 29, 2013 </a> But I do not recommend it because it will break on newer versions of Pelican. In fact, you should ditch Pelican 3.3 or less and move to a higher version if you require modified metadata.","tags":"Elegant - Pelican Theme","loc":"http://drpaneas.github.io/testblog/how-does-modified-metadata-works","title":"How does modified metadata works"},{"text":"No blog is complete without a social sharing plugin, that invites visitors to share your post on popular social networks. There are plethora of social sharing widgets available online. Unfortunately most of these widgets are used to track users. Technology watchdogs have been raising a hue and cry since as early as 2009 . Developers have come up with different ways to cope this issue. Solutions ranging from browser plugins to totally reinventing share widgets . Obviously, you cannot expect that all your visitors to use a privacy plugin. Most browsers on mobile platforms do not let user install any sort of plugin. Reinventing social widget will require educating users about it. The new style will be alien to them and may result in a decrease in number of shares on social networks. Elegant has a far simpler solution. It uses Pelican's Share Post plugin. This plugin generates old school URLs that cannot be used for online tracking at all. Elegant supports it out of the box. You just have to enable it in your Pelican configuration, PLUGINS = [ 'share_post' ] And viola! Like rest of the Elegant you can customize this widget too. You can define SHARE_POST_INTRO in your Pelican configuration to override the default \"Share on:\" text. You can also define it on per article basis by defining share_post_intro in your article metadata.","tags":"Elegant - Pelican Theme","loc":"http://drpaneas.github.io/testblog/how-to-use-social-sharing-plugin","title":"How to use Social Sharing Plugin"},{"text":"Visitor's browser will make separate HTTP requests to fetch elegent.css , custom.css , pygments.css and tipuesearch.css . These four separate requests can be avoided using Pelican plugin assets . Install the required packages pip install webassets cssmin Then enable assets plugin in your configuration. PLUGINS = [ 'assets' ] This minor fix will improve the load speed of your website. All four style sheets will be merged and minified into one style sheet, style.min.css . Compact CSS will save many bytes of data which in turn will improve page speed and parse time.","tags":"Elegant - Pelican Theme","loc":"http://drpaneas.github.io/testblog/avoid-unnecessary-http-requests","title":"Avoid Unnecessary HTTP Requests"},{"text":"You can change Elegant's look, color palette, font, size, and even labels used for widgets, sections and plugins. Elegant is best maintained when you treat it as a separate resource in your project. Do not edit template files, JavaScript code and style sheets. This practice will make upgrading Elegant fuss free process. Instead use following recommended ways. Customize Style To customize Elegant's visual style, use custom.css . You can override Elegant's visual style like font, color, spacing etc using this sheet. This empty style sheet is present at following path in your Elegant folder, static/css/custom.css Find the code of the element you want to customize in elegant.css . Copy the element's selector and styles, and paste it in custom.css . Edit this CSS code and customize it to your liking. Your customizations will override whatever rules are defined in elegant.css . Let's take a look how you can change the style of hyperlinks in an article. Following is the relevant code, article p :not ( #list-of-translations ) :not ( #post-share-links ) a , article ol a , article div .article-content ul :not ( .articles-timeline ) :not ( .related-posts-list ) a { border-bottom : thin dashed #A9A9A9 ; color : #000 ; } Copy and paste it in custom.css . Change color to red for example, article p :not ( #list-of-translations ) :not ( #post-share-links ) a , article ol a , article div .article-content ul :not ( .articles-timeline ) :not ( .related-posts-list ) a { border-bottom : thin dashed #A9A9A9 ; color : red ; } Test your website using Pelican. All links should be colored red. Read this post to make sure your site's page speed does not decrease due to additional HTTP request. Change Syntax Highlight Theme Elegant uses Solarized theme for syntax highlighting. To replace it, copy contents of your preferred theme's CSS style sheet into custom.css . Alternatively, you can replace contents of pygments.css with your theme's style sheet. If you feel like experimenting with different themes then this repository has Pygments CSS of Vim themes. This one has Pygments CSS of built-in styles. Do not forget to change .codehilite CSS class identifier to .highlight . Code blocks in Pelican generated HTML use .highlight class. Change Labels It is quite possible you will feel the need to tweak labels of different sections or widgets. For example, change label of social widget from \"Contact\" to \"Stay in Touch\". Don't worry! We got you covered! Elegant has all the customizable variables in one place. _defaults.html file . templates/_includes/_defaults.html Let's see how can we change social widget label. 1 2 3 4 5 6 {# Label for the list of social profiles #} {% if not SOCIAL_PROFILE_LABEL %} {% set SOCIAL_PROFILE_LABEL = 'Contact' %} {% else %} {% set SOCIAL_PROFILE_LABEL = SOCIAL_PROFILE_LABEL %} {% endif %} Line 1, text enclosed in {# #} is a comment, which says this section is about \"Label for the list of social profiles\". The text in all capital case SOCIAL_PROFILE_LABEL is the actual variable. Line 3 says SOCIAL_PROFILE_LABEL is set to Contact . To change this value, assign it a different value in your Pelican configuration, pelicanconf.py . SOCIAL_PROFILE_LABEL = 'Stay in Touch' That's it. The title of social widget will change. There are several others labels that you can customize easily without touching Elegant's source code.","tags":"Elegant - Pelican Theme","loc":"http://drpaneas.github.io/testblog/how-to-customize-elegant","title":"How to Customize Elegant"},{"text":"The idea behind Elegant's design is to make reading a clean and distraction free experience. Table of contents is important but it is not part of the article content. Therefore, Elegant pushes out table of content to the left of the article's main content. Its font size is relatively smaller. This way, table of content stays visible for navigation but reader's attention to the article stays unaffected. To utilise this feature, you need to use extract_toc plugin. Elegant encloses the table of content in <nav> tag for semantics. You also need to make sure your markup format generates a table of contents of your article. Markdown Format For Markdown, make sure you have enabled toc extension in Pelican configuration. MD_EXTENSIONS = [ 'toc' ] Next, add [TOC] in your article's markup. Here is a sample.md file. Title : My sample title Date : 2014 - 12 - 03 Category : Examples [ TOC ] This is my first heading ======================== This is the content of my sample blog post . This my second heading ====================== I will end my example here . That's it. Your article's table of contents will appear on the left side of the actual content. Enable Permalinks You can also take advantage of permalink option in toc extension. MD_EXTENSIONS = [ 'toc(permalink=true)' ] This will generate permalinks for every heading. Elegant keeps them hidden until user hovers over the heading. reStructuredText Format reStructuredText format has contents directive that generates table of contents of the post. Here is a sample.rst file. My sample title ############### :date: 2014-12-03 :category: Examples .. contents :: This is my first heading ======================== This is the content of my sample blog post. This my second heading ====================== I will end my example here. Hide Default Title Text Unlike Markdown, reStructuredText generates a default title for the table of contents. From official documentation , Language-dependent boilerplate text will be used for the title. The English default title text is \"Contents\". You end up having two titles for your table of contents, one generated by reStructuredText and the other by Elegant. Unfortunately, there is no straightforward way to disable default title generation in reStructuredText. You need to add following rule in your custom.css file to hide the duplicate title. div #contents p .topic-title.first { display : none ; } See this article to understand how you can use custom.css .","tags":"Elegant - Pelican Theme","loc":"http://drpaneas.github.io/testblog/how-elegant-displays-table-of-contents","title":"How Elegant displays Table of Contents"},{"text":"RSS feeds is the oldest and arguably the most used format to publish blog updates. Its use is not limited to RSS aggregators and readers. Tools like IFTTT and Calibre increases RSS feeds' power and versatility by manifolds. To enable RSS feeds, see Feed Settings in Pelican documentation. Links to RSS feeds are embedded in every page. Links to category and tag feeds are embedded only in the Categories and Tags pages respectively. Elegant does not show RSS feeds icon out of the box, though it can be easily enabled. All RSS consumers have the ability to capture feed links from a web address. For example, you need not put http://oncrashreboot.com/feeds/all.atom.xml in your RSS reader. Just http://oncrashreboot.com is enough. Your reader should be able to extract feed URL from the link. All popular browsers can detect RSS feeds on the page and show a visual cue. In Firefox, you can add \"Subscribe\" button to the toolbar . For Chrome, you can use RSS Subscription Extension . Here is an example of my category feeds in Chrome. These options make it redundant to have a separate RSS icon on the page. Elegant is all about a clean and minimal UI . But it is not so hard to enable it. First configure the Social widget . Then add a tuple for RSS , SOCIAL = (( 'RSS' , 'http://oncrashreboot.com/feeds/all.atom.xml' ),) Viola! You got yourself the RSS icon.","tags":"Elegant - Pelican Theme","loc":"http://drpaneas.github.io/testblog/how-to-show-rss-feeds-icon","title":"How to show RSS feeds icon"},{"text":"Bloggers use different tools to connect with their readers, engage in discussion with them, and create a loyal following of fans. These tools range from fully blown social web apps like twitter to old school RSS feeds. Bloggers add a social media widget to their blog which has links to all their social media profiles; inviting readers to engage with them else where on the web too. Most social widgets are loud and obtrusive. Their colors and placement takes away readers' attention from the actual content. Elegant understands the importance of readers engagement but it makes sure not to push author's \"online social karma\" down readers' throats. Elegant displays the widget in the sidebar. Each icon is a link to a social media profile with an appropriate title attribute. Icons use muted color which changes when user hovers over them. Elegant uses scalable vector icons from Font Awesome . You can instantly customise the icons by tweaking the CSS . This customisation can range from changing size and color to adding drop shadow. How to configure the widget Define SOCIAL in your pelicanconf.py . SOCIAL is list of tuple. Each tuple has two items, title and URL . SOCIAL = (( 'Twitter' , 'http://twitter.com/talham_' ), ( 'Github' , 'http://github.com/talha131' )) In this example, SOCIAL has two tuples. First tuple is ('Twitter', 'http://twitter.com/talham_') . First element of the tuple is the title Twitter and second element is the URL . Elegant picks icons from Font Awesome. Title of the tuple, for example Twitter , is used to decide the icon of the social media profile. Twitter will use fa-twitter CSS class, Github will use fa-github , and Facebook will use fa-facebook . You can see all the icons and their corresponding CSS classes in Font Awesome documentation . How to customize the icon What if the icon of your social media site is not available in Font Awesome? What if the CSS class name does not follow fa-<title> convention, for example Stack Exchange is different from fa-stack-exchange ? What if you want to use fa-youtube-play in place of fa-youtube for your Youtube profile? The solution is to add a third element to the tuple. CSS class name. SOCIAL = (( 'Twitter' , 'http://twitter.com/talham_' , 'twitter-square' ), ( 'Youtube' , 'http://example.com' , 'youtube-play' )) This third element is optional. It should be equal to the Font Awesome CSS class that you want to use for the social profile, minus the fa part from the CSS class name. How to customize Social Profile Label By default, Elegant labels social profile section as Contact . You can change this label by defining a new variable SOCIAL_PROFILE_LABEL in your pelicanconf.py file. SOCIAL_PROFILE_LABEL = u'Stay in Touch'","tags":"Elegant - Pelican Theme","loc":"http://drpaneas.github.io/testblog/how-to-display-your-social-media-profiles","title":"How to display your Social Media Profiles"},{"text":"The Previous and Next post links are a powerful way to keep visitors engaged and to guide them through your site. Elegant requires Neighbor Articles plugin to show these navigational links. Elegant shows newer article on the right hand side and older article on the left hand side at the bottom of every article. Most of the content on web is written in left to right languages. In these languages pages are placed from left to right. It seemed natural to use the same order in Elegant.","tags":"Elegant - Pelican Theme","loc":"http://drpaneas.github.io/testblog/how-to-show-previous-and-next-article","title":"How to show Previous and Next Articles"},{"text":"Elegant has support for popular web tracking services, StatCounter and Google Analytics . You have to put web property ID assigned to you by the these services, in your configuration to use the tracking code. StatCounter You need two codes from StatCounter- project ID and security code. Create a project in StatCounter. Click on Config, Reinstall Code and then Default Guide. It will show you a standard code that a website must have in order to use StatCounter. <!-- Start of StatCounter Code for Default Guide --> < script type = \"text/javascript\" > var sc_project = 5555555 ; var sc_invisible = 1 ; var sc_security = \"XXXXXXXX\" ; ... <!-- End of StatCounter Code for Default Guide --> Assign sc_project value to STAT_COUNTER_PROJECT and sc_security to STAT_COUNTER_SECURITY . STAT_COUNTER_PROJECT = 5555555 STAT_COUNTER_SECURITY = u'XXXXXXXX' Google Analytics Get your property ID from your Google Analytics account. It has this format UA-XXXXX-X . Set GOOGLE_ANALYTICS variable to it in your configuration. GOOGLE_ANALYTICS = u'UA-00000000-1' That's it. Elegant will take care of the rest.","tags":"Elegant - Pelican Theme","loc":"http://drpaneas.github.io/testblog/how-to-use-statcounter-and-google-analytics","title":"How to use StatCounter and Google Analytics"},{"text":"reStructuredText and Markdown have directives that generate line numbers for code snippets. Install Pygments to use these directives. Following examples will generate this output, 1 2 def example (): print 'Hello World' reStructuredText reStructuredText has code-block directive to insert code snippets in your markup. Use linenos flag to switch on line numbers for the snippet. .. code-block :: python :linenos: def example(): print 'Hello World' Markdown Python-Markdown uses CodeHilite extension for syntax highlighting. Setup CodeHilite, then use SheBang !# to generate line numbers. #!python def example (): print 'Hello World'","tags":"Elegant - Pelican Theme","loc":"http://drpaneas.github.io/testblog/how-to-display-line-numbers-in-code-snippets","title":"How to display Line Numbers in Code Snippets"},{"text":"Elliott Hulse, a fitness coach, on the topic of building muscles , Your muscles need to be stressed to a point where they are FORCED to grow bigger and stronger. Otherwise they will stay the same, seeing no need to waste valuable energy on developing a bigger musculature. Something key to remember, for any physical goal, is that the body will always take the path of least resistance. Put it in an environment where YOUR GOAL is the only possible outcome. To have big muscles you have to lift heavy weights. Heavier than what you lift easily. If you won't push your body, it won't develop. Forcing your body to do the impossible is the only way to make it develop. We all create a comfort zone. We build it, cherish it, rely on it, and then we lock ourselves inside it. This is true for software development too. You never improve if you cage yourself in your comfort zone. Call your specific skills your niche. Proclaim that the your programming language is the best language ever created. Fall in love with your platform and become its ardent worshipper. Your call! You cannot improve with this attitude. CC image courtesy of Paul Reynolds C was the first programming language I learned. After few months, I landed on my first job where I kept developing softwares in C. For a long time I didn't bother to learn how to use a debugger at all. My excuse was something along these lines, \"I can debug all I want using log statements thrown all around the code.\" This was a good enough excuse for many. The real reason was that learning a command line debugger ( GDB ) scared me. Each time I opened up a GDB tutorial, I would close the browser tab within few minutes. \"Gosh! What is this? The lingo is so alien. What the heck writer is babbling about? Argh! I will never get it. \"I have reached my limits. Why add another item in list of my failures? Lets drop it. I don't have to feel so uncomfortable. My world is going fine without GDB .\" Don't do what I did. This approach may work for some time and in few cases. Unfortunately, this attitude becomes persistent and turns into a habit. It begins to spread from your programming skills into rest of your life. In the same class where I learned C, several students gave up on C. Their excuse, \"C is not widely used. We are interested in learning Java or C#. These will offer us better job prospects.\" Guess what? They didn't come around to learn any of their favorite languages. First they gave up on pointers, and then C. Same guys gave up on object-oriented programming introductory classes. When C# classes started they weren't ready for it at all. Finally they stopped programming altogether. Some took up graphic designing, and rest took up quality assurance. The attitude of shying away from difficult stripped away their dreams. If you want to improve, get out of your comfort zone. Pick something that challenges you. Do whatever that makes you uncomfortable.","tags":"Career Advice","loc":"http://drpaneas.github.io/testblog/career-advice-software-developers-fitness-coach","title":"A Fitness Coach and the Software Developers"},{"text":"Elegant is a stylish, responsive, and minimal Pelican theme that looks amazing across all screen resolutions and devices. Elegant gives meaning to the expression \"sand the under side of the drawer.\" Every feature and style of Elegant is the result of a long thought process. Get Elegant 1.3 License Agreement | Release Notes Show your support. Leave a tip! What makes Elegant so special? Search Static sites usually do not offer search. Elegant uses Tipue Search - an open source jQuery plugin, to offer search for your static site. There are two search modes. JSON Mode Your site pages will be stored in JSON at your server. Tipue Search will use AJAX to access it and render search result. You need Tipue Search plugin to use this mode. Live Mode Search Tipue Search will fetch your site using Sitemap, index it and store it in the visitor's cache. This mode requires Sitemap plugin . Use JSON mode if you value speed, or have a large site, or don't want to overwhelm your host server for every search query. Here is how the search result looks like Search box is part of main navigation menu so that visitor can search from any page. Live Filter for Tags Elegant is a minimal theme. Instead of creating separate pages for each tag, Elegant shows all the tags on a single page. To help visitor find the tags he is interested in, Elegant offers live filter. Go to tags page and type your required tag in \"Find a tag\" search box. Elegant will automatically filter the list. For example, this is how my tags page looks like As soon as I type \"os\", all other tags are filtered out With live filter, your reader will have no difficulty in picking up his desired tag from the list, even if your site has hundreds of tags. All Categories but with zero clutter Pelican by default creates a separate page for each category. Themes list all the articles filed in that category at its page. Elegant takes a different approach. It lists all the categories and their articles on the same page. To reduce clutter and utilise space efficiently, each category and its list of articles in enclosed in collapsible accordions . Here is how categories appear collapsed And this is how they appear uncollapsed Did you notice that categories are listed in ascending alphabetical order and articles are sorted by their date in descending order? Home Page Features This is the page that visitors see when they open your website. Your chance to make a good and lasting first impression. Most sites just display a list of recent posts. Elegant goes the extra mile. Check this out You can see two sections here, About me My Projects There is a third section below these two sections, \"Recent articles\" About me You can write up your own About me section using LANDING_PAGE_ABOUT variable in your configuration. It is a dictionary that has two keys title and details . Value of title is displayed in the header of the home page, like in the above example it is \"I design and build software products for iOS and OSX \". details is the text that appears under \"About me\" heading. Projects Projects list is read from PROJECTS . It is an array of dictionaries. Each dictionary has three keys, name which will have name of your project, url which will have URL of the project, and description which will have the description of the project. You can define as many projects as you want. Here is an example, 1 2 3 4 5 6 7 8 9 PROJECTS = [{ 'name' : 'Logpad + Duration' , 'url' : 'https://github.com/talha131/logpad-plus-duration#logpad--duration' , 'description' : 'Vim plugin to emulate Windows Notepad logging feature,' ' and log duration of each entry' }, { 'name' : 'Elegant Theme for Pelican' , 'url' : 'http://oncrashreboot.com/pelican-elegant' , 'description' : 'A clean and distraction free theme, with search and a' ' lot more unique features, using Jinja2 and Bootstrap' }] Recent Articles Recent articles show last RECENT_ARTICLES_COUNT whose default value is 10. It also has a link to \"all posts\". Mailchimp Mailchimp has become the preferred newsletter service. Elegant shows a form to subscribe to your newsletter, above the fold, in the right section of every article. Increased visibility is said to increase number of subscribers. You need to put your Mailchimp form action URL in MAILCHIMP_FORM_ACTION in your configuration file. You can also define EMAIL_SUBSCRIPTION_LABEL , EMAIL_FIELD_PLACEHOLDER and SUBSCRIBE_BUTTON_TITLE to customize user experience. Collapsible Comments Readers use scroll bar to track their progress when reading inside their browsers. Very often comments take up more space than the actual article. When comments take up more space, it throws the scroll bar proportion off and reader cannot judge his progress correctly. Hacker News hosted a discussion on this topic. tons of online articles list comments on the same page, so the scroll bar is almost a negative incentive to keep reading. \"I've read this much of the article and I'm only 1/20th of the way down?\" [user stops reading, unaware that there's 450 comments and the article is actually pretty short] Elegant keeps the comments section hidden by default. Reader can hide and unhide the section by clicking on the comments section. This is how comments section appear It expands when reader clicks on it Articles Count with every Tag and Category Readers of an article on your site usually look for other articles on the same topic. Categories and tags are a way of showing them related articles. Elegant displays the count of articles that you have written in a category or tag in a non-intrusive manner. Every category and tag has the count of articles in superscript. So if you have written three articles in the C++ category or tag, it will have 3 in the superscript. This way visitor will know you have written other articles too on the same topic. Check out the screenshots, Custom 404 Page Elegant has a custom Error 404 page for your readers. Page Title Elegant follows following format for the <title> tag Article title · Site Name Some sites put site title first and article title later in the <title> tag. There is a problem with this approach. When you open too many tabs, browser delimits tab's title from the end. In such cases, only the first few words or even letters of the <title> are left visible. If visitor has opened several tabs from your website, all tabs will have \"Site Name…\" title. User will need to click on each tab to identify his required tab from the content. But with Elegant's approach article title will always be visible, and reader will have less difficultly in identifying the tab he is after. Putting site title before the article title increases your site name visibility. Elegant achieves this by putting site name in the top navigation bar of every page, where it always stays above the fold. Code Style Elegant uses Solarized theme for syntax highlighting. Line numbers have a different background color so that they appear distinct from the code. Here is an example 1 2 3 4 int sample_function ( void ) { printf ( \"This is a sample function\" ); return 0 } Article Subtitle Pelican lets you define title of your article in the meta data. Elegant adds subtitle support. Just define subtitle in your article's meta data and it will appear along with your title. Here is an example, Article subtitle is displayed with the title in every list. To keep it visibly separate from title, subtitle is enclosed in <small> tag. When visible cue cannot be used, like in the title attribute of html anchor tag <a> , a hyphen is inserted between them. Elegant - Technical Nitty-Gritty License The license requires that you give credit to me, Talha Mansoor, as the author of the Elegant theme on every site that uses this theme. I have placed the attribution in the footer of every page. Do not remove it. If you need to remove or change the style of the attribution, please get in touch with me first. Along with this attribution clause, Elegant theme is licensed under The MIT License. If you use my theme, I would love to hear from you. Get in touch and let me know about it. I may link to your site too. Contribute Front end design is not my strong suite. I must have made some blunders in this design unknowingly. Please don't let me go away with buggy code. File bugs at Github issues Share your ideas about the design in the comments below And most of all contribute improvements to this project There are two problem areas that I can think of, Internet Explorer support Web safe fonts. I developed this theme on a MacBook Retina. Although I have tried to make sure it looks great on all platforms but it still needs polish Besides these, there must be other bugs that I haven't noticed yet. I need your help to hunt them down and make them behave.","tags":"Elegant - Pelican Theme","loc":"http://drpaneas.github.io/testblog/elegant-best-pelican-theme-features","title":"Elegant"},{"text":"Mac App Store is accessed using macappstore URL scheme. Your URL should follow this pattern: macappstore://itunes.apple.com/app/id [ APP_ID ] ?mt = 12 Replace [APP_ID] with your app's track id. How to find Track ID of any app You can easily get track ID from URL of the application at App Store. For example, URL of Mac App Store page for Jump Desktop is https://itunes.apple.com/ca/app/jump-desktop-remote-desktop/id524141863?mt = 12 Number between id and ? is the required ID which in this case is 524141863 . Lets test it. Replace [APP_ID] with 524141863 in the macappstore:// URL given above. Then open the URL from Terminal open macappstore://itunes.apple.com/app/id524141863?mt = 12 This should open Mac App Store desktop application to Jump Desktop page. How to open Mac App Store from inside your Application Now that we know the required URL scheme and track ID , opening iTunes page in Mac App Store is pretty simple. See the following code snippet. 1 2 3 4 5 6 7 8 NSString * track_id = @\"524141863\" ; NSString * app_url_str = [ NSString stringWithFormat : @\"macappstore://itunes.apple.com/app/id%@?mt=12\" , track_id ]; // Create NSURL to pass it to NSWorkspace NSURL * app_url = [ NSURL URLWithString : app_url_str ]; // Open URL [[ NSWorkspace sharedWorkspace ] openURL : app_url ]; You just need to the pass openURL: message with correctly formed URL to [NSWorkspace sharedWorkspace] object.","tags":"OSX Software Development","loc":"http://drpaneas.github.io/testblog/how-to-open-mac-app-store-programmatically","title":"How to open Mac App Store Programmatically"}]}